<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Business</name>
    </assembly>
    <members>
        <member name="T:Business.BUSTransferDEP2DEP">
            <summary>
            BUSTransferDEP2DEP 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSBase">
            <summary>
            业务类的基类
            </summary>
        </member>
        <member name="M:Business.BUSBase.CheckBusinessDataAndLogic(System.Data.DataTable,System.Collections.ArrayList)">
             <summary>
            check business logic and business calculation and check data 
             </summary>
             <returns></returns>
        </member>
        <member name="M:Business.BUSBase.BusinessSaveData(System.Data.DataTable,System.Collections.ArrayList)">
            <summary>
            save data in business layer
            </summary>
            <param name="dt"></param>
            <param name="fieldsList"></param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSBase.BusinessDeleteData(System.Collections.ArrayList)">
            <summary>
            delete Data in business layer
            </summary>
            <param name="tableName"></param>
            <param name="pkField"></param>
            <param name="pkValue"></param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSBase.CheckBusinessLogic_rule(System.Data.DataTable,System.Collections.ArrayList)">
            <summary>
            the rule of business check;for example: the endtime must be >=start time  and so on.
            </summary>
            <param name="fieldsList"></param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSBase.CheckBusinessLogic_calculate(System.Data.DataTable,System.Collections.ArrayList)">
            <summary>
            logical of business calculate.for example :among of fields calculate and so on.
            </summary>
            <param name="fieldsList"></param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSBase.CheckBusinessData(System.Data.DataTable,System.Collections.ArrayList)">
            <summary>
            check data's validity
            </summary>
            <param name="dt"></param>
            <param name="fieldsList"></param>
            <returns>if sucess --"" else return error message</returns>
        </member>
        <member name="M:Business.BUSBase.CheckBUSPKExistForInsert(System.Data.DataTable,System.String,System.String)">
            <summary>
            if business pk exists in DB then return the  prompt of this error,else return "";
            </summary>		
            <returns></returns>
            
        </member>
        <member name="M:Business.BUSBase.CheckBUSPKRepeatInDataTable(System.Data.DataTable,System.String,System.String)">
            <summary>
            check business pk repeat in the same DataTable
            </summary>
            <param name="dt"></param>
            <param name="tableName"></param>
            <param name="busPKName"></param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSBase.GenerateSQLToCheckBUSPK(System.String,System.Data.DataRow,System.String,System.String)">
            <summary>
            Generate sql sentence
            </summary>
            <param name="pkValue"></param>
            <returns></returns>
            业务主键验证，sql
        </member>
        <member name="M:Business.BUSTransferDEP2DEP.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Business.BUSTransferDEP2DEP.CheckQuantity(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="dtTransferDEP2DEPMaterial"></param>
            <returns></returns>
        </member>
        <member name="T:Business.BUSCancelPreserveEdit">
            <summary>
            BUSCancelPreserveEdit 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.SystemConfig.CDAEmployee">
            <summary>
            Summary description for CDAEmployee.
            </summary>
        </member>
        <member name="M:Business.SystemConfig.CDAEmployee.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Business.SystemConfig.CDAEmployee.SelectEmployeesDynamic(System.String,System.String)">
             <summary>
             此函数调用存储过程 spSelectEmployeesDynamic 并返回包含记录的数据读取器.
             </summary>
            <param name="departmentID">变量 departmentID: 用于设置参数 '@DepartmentID' 给存储过程spSelectEmployeesDynamic </param>	
            <param name="keyword">变量 keyword: 用于设置参数 '@Keyword' 给存储过程spSelectEmployeesDynamic </param>	
             <returns>包含记录集的数据表</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectEmployeesDynamic  ] 如下：
             <code>
             
            --region [dbo].[spSelectEmployeesDynamic]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spSelectEmployeesDynamic]
            -- Date Generated: 2005年6月6日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spSelectEmployeesDynamic]
            	@DepartmentID nvarchar(50),
            	@Keyword nvarchar(50)
            AS
            
            --SET NOCOUNT ON
            --SET TRANSACTION ISOLATION LEVEL READ COMMITTED
            if @DepartmentID ='' or @DepartmentID is null
            begin
            	SELECT
            		[EmployeeID],
            		[EmployeeName],
            		[FullName],
            		[EmployeeDescription],
            		Employee.[DepartmentID],
            		Department.DepartmentName,
            		Employee.[Fax],
            		Employee.[Tel],
            		Employee.[Email],
            		Employee.[Mobile],
            		Employee.[Status]
            	FROM
            		[dbo].[Employee]
            	INNER JOIN Department
            	ON	Department.DepartmentID = Employee.DepartmentID
            	WHERE
            		EmployeeID like '%'+@Keyword+'%'
            		or EmployeeName like '%'+@Keyword+'%'
            		or FullName like '%'+@Keyword+'%'
            		or EmployeeDescription like '%'+@Keyword+'%'
            	
            end
            else
            begin
            	SELECT
            		[EmployeeID],
            		[EmployeeName],
            		[FullName],
            		[EmployeeDescription],
            		Employee.[DepartmentID],
            		Department.DepartmentName,
            		Employee.[Fax],
            		Employee.[Tel],
            		Employee.[Email],
            		Employee.[Mobile],
            		Employee.[Status]
            	FROM
            		[dbo].[Employee]
            	INNER JOIN Department
            	ON	Department.DepartmentID = Employee.DepartmentID
            	WHERE
            		Employee.DepartmentID = @DepartmentID
            		and
            		(
            		EmployeeID like '%'+@Keyword+'%'
            		or EmployeeName like '%'+@Keyword+'%'
            		or FullName like '%'+@Keyword+'%'
            		or EmployeeDescription like '%'+@Keyword+'%'
            		)
            
            end
            
            
            --endregion
            
            
             </code>
             结果集中的列包括:
             SqlString EmployeeID, SqlString EmployeeName, SqlString FullName, SqlString EmployeeDescription, SqlString DepartmentID, SqlString DepartmentName, SqlString Fax, SqlString Tel, SqlString Email, SqlString Mobile, SqlByte Status,
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDAEmployee.SelectDepartmentListPaged(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            function to select one page's Department list.
            </summary>
            <param name="where">query condition</param>
            <param name="orderBy" ></param>
            <param name="ascOrDesc" ></param>
            <param name="recordCount">total Department count to fill query condition</param>
            <param name="pageIndex">required page</param>
            <param name="pageSize">record number per page</param>
            <returns>SqlDataReader with the result</returns>
        </member>
        <member name="M:Business.SystemConfig.CDAEmployee.SelectDepartmentListPagedTotalCount(System.String)">
            <summary>
            get record count
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:Business.SystemConfig.CDAEmployee.SelectEmployeesAllIDAndName">
             <summary>
             此函数调用存储过程 spSelectEmployeesAllIDAndName 并返回包含记录的数据读取器.
             </summary>
             <returns>SqlDataReader</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectEmployeesAllIDAndName  ] 如下：
             <code>
             
            
            --region [dbo].[spSelectEmployeesAllIDAndName]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spSelectEmployeesAllIDAndName]
            -- Date Generated: 2005年6月6日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spSelectEmployeesAllIDAndName]
            AS
            
            --SET NOCOUNT ON
            --SET TRANSACTION ISOLATION LEVEL READ COMMITTED
            
            
            SELECT
            	[EmployeeID],
            	[EmployeeName]
            FROM
            	[dbo].[Employee]
            ORDER BY
            	EmployeeName
            
            --endregion
            
            
             </code>
             结果集中的列包括:
             SqlString EmployeeID, SqlString EmployeeName,
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDAEmployee.SelectEmployee(System.String)">
             <summary>
             此函数调用存储过程 spSelectEmployee 并返回包含记录的数据读取器.
             </summary>
            <param name="employeeID">变量 employeeID: 用于设置参数 '@EmployeeID' 给存储过程spSelectEmployee </param>	
             <returns>SqlDataReader</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectEmployee  ] 如下：
             <code>
             
            --region [dbo].[spSelectEmployee]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spSelectEmployee]
            -- Date Generated: 2005年6月6日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spSelectEmployee]
            	@EmployeeID nvarchar(32)
            AS
            
            --SET NOCOUNT ON
            --SET TRANSACTION ISOLATION LEVEL READ COMMITTED
            
            
            SELECT
            	[EmployeeID],
            	[EmployeeName],
            	[FullName],
            	[EmployeeDescription],
            	[DepartmentID],
            	[Fax],
            	[Tel],
            	[Email],
            	[Mobile],
            	[Status]
            FROM
            	[dbo].[Employee]
            WHERE
            	[EmployeeID] = @EmployeeID
            
            --endregion
            
            
             </code>
             结果集中的列包括:
             SqlString EmployeeID, SqlString EmployeeName, SqlString FullName, SqlString EmployeeDescription, SqlString DepartmentID, SqlString Fax, SqlString Tel, SqlString Email, SqlString Mobile, SqlByte Status,
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDAEmployee.InsertEmployee(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Boolean,System.Byte)">
             <summary>
             此函数调用存储过程 spInsertEmployee 并返回数据库中受影响的记录数
             </summary>
            <param name="employeeID">变量 employeeID: 用于设置参数 '@EmployeeID' 给存储过程spInsertEmployee </param>	
            <param name="employeeName">变量 employeeName: 用于设置参数 '@EmployeeName' 给存储过程spInsertEmployee </param>	
            <param name="fullName">变量 fullName: 用于设置参数 '@FullName' 给存储过程spInsertEmployee </param>	
            <param name="employeeDescription">变量 employeeDescription: 用于设置参数 '@EmployeeDescription' 给存储过程spInsertEmployee </param>	
            <param name="departmentID">变量 departmentID: 用于设置参数 '@DepartmentID' 给存储过程spInsertEmployee </param>	
            <param name="fax">变量 fax: 用于设置参数 '@Fax' 给存储过程spInsertEmployee </param>	
            <param name="tel">变量 tel: 用于设置参数 '@Tel' 给存储过程spInsertEmployee </param>	
            <param name="email">变量 email: 用于设置参数 '@Email' 给存储过程spInsertEmployee </param>	
            <param name="mobile">变量 mobile: 用于设置参数 '@Mobile' 给存储过程spInsertEmployee </param>	
            <param name="status">变量 status: 用于设置参数 '@Status' 给存储过程spInsertEmployee </param>	
             <returns>受影响的记录数</returns>
             <remarks>
             存储过程源码 [ 存储过程 spInsertEmployee  ] 如下：
             <code>
             
            --region [dbo].[spInsertEmployee]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spInsertEmployee]
            -- Date Generated: 2005年6月6日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spInsertEmployee]
            	@EmployeeID nvarchar(32),
            	@EmployeeName nvarchar(64),
            	@FullName nvarchar(512),
            	@EmployeeDescription nvarchar(1024),
            	@DepartmentID nvarchar(50),
            	@Fax nvarchar(64),
            	@Tel nvarchar(64),
            	@Email nvarchar(64),
            	@Mobile nvarchar(64),
            	@Status tinyint
            AS
            
            --SET NOCOUNT ON
            
            INSERT INTO [dbo].[Employee] (
            	[EmployeeID],
            	[EmployeeName],
            	[FullName],
            	[EmployeeDescription],
            	[DepartmentID],
            	[Fax],
            	[Tel],
            	[Email],
            	[Mobile],
            	[Status]
            ) VALUES (
            	@EmployeeID,
            	@EmployeeName,
            	@FullName,
            	@EmployeeDescription,
            	@DepartmentID,
            	@Fax,
            	@Tel,
            	@Email,
            	@Mobile,
            	@Status
            )
            
            --endregion
            
            
             </code>
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDAEmployee.UpdateEmployee(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Boolean,System.Byte)">
             <summary>
             此函数调用存储过程 spUpdateEmployee 并返回数据库中受影响的记录数
             </summary>
            <param name="employeeID">变量 employeeID: 用于设置参数 '@EmployeeID' 给存储过程spUpdateEmployee </param>	
            <param name="employeeName">变量 employeeName: 用于设置参数 '@EmployeeName' 给存储过程spUpdateEmployee </param>	
            <param name="fullName">变量 fullName: 用于设置参数 '@FullName' 给存储过程spUpdateEmployee </param>	
            <param name="employeeDescription">变量 employeeDescription: 用于设置参数 '@EmployeeDescription' 给存储过程spUpdateEmployee </param>	
            <param name="departmentID">变量 departmentID: 用于设置参数 '@DepartmentID' 给存储过程spUpdateEmployee </param>	
            <param name="fax">变量 fax: 用于设置参数 '@Fax' 给存储过程spUpdateEmployee </param>	
            <param name="tel">变量 tel: 用于设置参数 '@Tel' 给存储过程spUpdateEmployee </param>	
            <param name="email">变量 email: 用于设置参数 '@Email' 给存储过程spUpdateEmployee </param>	
            <param name="mobile">变量 mobile: 用于设置参数 '@Mobile' 给存储过程spUpdateEmployee </param>	
            <param name="status">变量 status: 用于设置参数 '@Status' 给存储过程spUpdateEmployee </param>	
             <returns>受影响的记录数</returns>
             <remarks>
             存储过程源码 [ 存储过程 spUpdateEmployee  ] 如下：
             <code>
             
            --region [dbo].[spUpdateEmployee]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spUpdateEmployee]
            -- Date Generated: 2005年6月6日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spUpdateEmployee]
            	@EmployeeID nvarchar(32),
            	@EmployeeName nvarchar(64),
            	@FullName nvarchar(512),
            	@EmployeeDescription nvarchar(1024),
            	@DepartmentID nvarchar(50),
            	@Fax nvarchar(64),
            	@Tel nvarchar(64),
            	@Email nvarchar(64),
            	@Mobile nvarchar(64),
            	@Status tinyint
            AS
            
            --SET NOCOUNT ON
            
            UPDATE [dbo].[Employee] SET
            	[EmployeeName] = @EmployeeName,
            	[FullName] = @FullName,
            	[EmployeeDescription] = @EmployeeDescription,
            	[DepartmentID] = @DepartmentID,
            	[Fax] = @Fax,
            	[Tel] = @Tel,
            	[Email] = @Email,
            	[Mobile] = @Mobile,
            	[Status] = @Status
            WHERE
            	[EmployeeID] = @EmployeeID
            
            --endregion
            
            
             </code>
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDAEmployee.DeleteEmployee(System.String)">
             <summary>
             此函数调用存储过程 spDeleteEmployee 并返回数据库中受影响的记录数
             </summary>
            <param name="employeeID">变量 employeeID: 用于设置参数 '@EmployeeID' 给存储过程spDeleteEmployee </param>	
             <returns>受影响的记录数</returns>
             <remarks>
             存储过程源码 [ 存储过程 spDeleteEmployee  ] 如下：
             <code>
             
            --region [dbo].[spDeleteEmployee]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spDeleteEmployee]
            -- Date Generated: 2005年6月6日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spDeleteEmployee]
            	@EmployeeID nvarchar(32)
            AS
            
            --SET NOCOUNT ON
            
            DELETE FROM [dbo].[Employee]
            WHERE
            	[EmployeeID] = @EmployeeID
            
            --endregion
            
            
             </code>
             </remarks>
        </member>
        <member name="T:Business.SystemConfig.CDADepartment">
            <summary>
            database access class from department table
            </summary>
        </member>
        <member name="M:Business.SystemConfig.CDADepartment.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Business.SystemConfig.CDADepartment.SelectDepartmentsAll">
             <summary>
             此函数调用存储过程 spSelectDepartmentsAll 并返回包含记录的数据读取器.
             </summary>
             <returns>包含记录集的数据表</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectDepartmentsAll  ] 如下：
             <code>
             
            --region [dbo].[spSelectDepartmentsAll]
            
            ------------------------------------------------------------------------------------------------------------------------
            
            
            -- Procedure Name: [dbo].[spSelectDepartmentsAll]
            -- Date Generated: 2005年6月6日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spSelectDepartmentsAll]
            AS
            
            SET NOCOUNT ON
            
            SELECT
            	[DepartmentID],
            	[DepartmentName],
            	[DepartmentDescription],
            	[Principal],
            	[Address],
            	[Fax],
            	[Tel],
            	[Email],
            	[Contact],
            	[Status]
            FROM
            	[dbo].[Department]
            ORDER BY
            	DepartmentID
            
            --endregion
            
            
             </code>
             结果集中的列包括:
             SqlString DepartmentID, SqlString DepartmentName, SqlString DepartmentDescription, SqlString Principal, SqlString Address, SqlString Fax, SqlString Tel, SqlString Email, SqlString Contact, SqlByte Status,
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDADepartment.SelectDepartmentsDynamic(System.String)">
             <summary>
             此函数调用存储过程 spSelectDepartmentsDynamic 并返回包含记录的数据读取器.
             </summary>
            <param name="keyword">变量 keyword: 用于设置参数 '@Keyword' 给存储过程spSelectDepartmentsDynamic </param>	
             <returns>包含记录集的数据表</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectDepartmentsDynamic  ] 如下：
             <code>
             
            --region [dbo].[spSelectDepartmentsDynamic]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Procedure Name: [dbo].[spSelectDepartmentsDynamic]
            -- Date Generated: 2005年6月6日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spSelectDepartmentsDynamic]
            (
            	@Keyword nvarchar(50)
            )
            AS
            
            SELECT
            	[DepartmentID],
            	[DepartmentName],
            	[DepartmentDescription],
            	[Principal],
            	[Address],
            	[Fax],
            	[Tel],
            	[Email],
            	[Contact],
            	[Status]
            FROM
            	[dbo].[Department]
            WHERE
            	DepartmentID like '%'+@Keyword+'%'
            	or DepartmentName like '%'+@Keyword+'%'
            	or DepartmentDescription like '%'+@Keyword+'%'
            order by DepartmentID
            
            --endregion
            
            
             </code>
             结果集中的列包括:
             SqlString DepartmentID, SqlString DepartmentName, SqlString DepartmentDescription, SqlString Principal, SqlString Address, SqlString Fax, SqlString Tel, SqlString Email, SqlString Contact, SqlByte Status,
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDADepartment.SelectDepartmentListPaged(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            function to select one page's Department list.
            </summary>
            <param name="where">query condition</param>
            <param name="orderBy" ></param>
            <param name="ascOrDesc" ></param>
            <param name="recordCount">total Department count to fill query condition</param>
            <param name="pageIndex">required page</param>
            <param name="pageSize">record number per page</param>
            <returns>SqlDataReader with the result</returns>
        </member>
        <member name="M:Business.SystemConfig.CDADepartment.SelectDepartmentListPagedTotalCount(System.String)">
            <summary>
            get record count
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:Business.SystemConfig.CDADepartment.SelectDepartmentsIDAndName">
             <summary>
             此函数调用存储过程 spSelectDepartmentsIDAndName 并返回包含记录的数据读取器.
             </summary>
             <returns>SqlDataReader</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectDepartmentsIDAndName  ] 如下：
             <code>
             
            --region [dbo].[spSelectDepartmentsAll]
            
            ------------------------------------------------------------------------------------------------------------------------
            
            
            -- Procedure Name: [dbo].[spSelectDepartmentsIDAndName]
            -- Date Generated: 2005年6月6日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spSelectDepartmentsIDAndName]
            AS
            
            SET NOCOUNT ON
            
            SELECT
            	[DepartmentID],
            	[DepartmentName],
            	[Status]
            FROM
            	[dbo].[Department]
            ORDER BY
            	DepartmentID
            
            --endregion
            
            
             </code>code>
             结果集中的列包括:
             SqlString DepartmentID, SqlString DepartmentName, SqlByte Status,
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDADepartment.SelectDepartment(System.String)">
             <summary>
             此函数调用存储过程 spSelectDepartment 并返回包含记录的数据读取器.
             </summary>
            <param name="departmentID">变量 departmentID: 用于设置参数 '@DepartmentID' 给存储过程spSelectDepartment </param>	
             <returns>SqlDataReader</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectDepartment  ] 如下：
             <code>
             
            --region [dbo].[spSelectDepartment]
            
            ------------------------------------------------------------------------------------------------------------------------
            
            
            -- Procedure Name: [dbo].[spSelectDepartment]
            -- Date Generated: 2005年6月6日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spSelectDepartment]
            	@DepartmentID nvarchar(50)
            AS
            
            SET NOCOUNT ON
            SET TRANSACTION ISOLATION LEVEL READ COMMITTED
            
            SELECT
            	[DepartmentID],
            	[DepartmentName],
            	[DepartmentDescription],
            	[Principal],
            	[Address],
            	[Fax],
            	[Tel],
            	[Email],
            	[Contact],
            	[Status]
            FROM
            	[dbo].[Department]
            WHERE
            	[DepartmentID] = @DepartmentID
            
            --endregion
            
            
             </code>code>
             结果集中的列包括:
             SqlString DepartmentID, SqlString DepartmentName, SqlString DepartmentDescription, SqlString Principal, SqlString Address, SqlString Fax, SqlString Tel, SqlString Email, SqlString Contact, SqlByte Status,
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDADepartment.InsertDepartment(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Byte)">
             <summary>
             此函数调用存储过程 spInsertDepartment 并返回数据库中受影响的记录数
             </summary>
            <param name="departmentID">变量 departmentID: 用于设置参数 '@DepartmentID' 给存储过程spInsertDepartment </param>	
            <param name="departmentName">变量 departmentName: 用于设置参数 '@DepartmentName' 给存储过程spInsertDepartment </param>	
            <param name="departmentDescription">变量 departmentDescription: 用于设置参数 '@DepartmentDescription' 给存储过程spInsertDepartment </param>	
            <param name="principal">变量 principal: 用于设置参数 '@Principal' 给存储过程spInsertDepartment </param>	
            <param name="address">变量 address: 用于设置参数 '@Address' 给存储过程spInsertDepartment </param>	
            <param name="fax">变量 fax: 用于设置参数 '@Fax' 给存储过程spInsertDepartment </param>	
            <param name="tel">变量 tel: 用于设置参数 '@Tel' 给存储过程spInsertDepartment </param>	
            <param name="email">变量 email: 用于设置参数 '@Email' 给存储过程spInsertDepartment </param>	
            <param name="contact">变量 contact: 用于设置参数 '@Contact' 给存储过程spInsertDepartment </param>	
            <param name="status">变量 status: 用于设置参数 '@Status' 给存储过程spInsertDepartment </param>	
             <returns>受影响的记录数</returns>
             <remarks>
             存储过程源码 [ 存储过程 spInsertDepartment  ] 如下：
             <code>
             
            --region [dbo].[spInsertDepartment]
            
            ------------------------------------------------------------------------------------------------------------------------
            
            
            -- Procedure Name: [dbo].[spInsertDepartment]
            -- Date Generated: 2005年6月6日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spInsertDepartment]
            	@DepartmentID nvarchar(50),
            	@DepartmentName nvarchar(255),
            	@DepartmentDescription ntext,
            	@Principal nvarchar(64),
            	@Address nvarchar(512),
            	@Fax nvarchar(64),
            	@Tel nvarchar(64),
            	@Email nvarchar(64),
            	@Contact nvarchar(64),
            	@Status tinyint
            AS
            
            SET NOCOUNT ON
            
            INSERT INTO [dbo].[Department] (
            	[DepartmentID],
            	[DepartmentName],
            	[DepartmentDescription],
            	[Principal],
            	[Address],
            	[Fax],
            	[Tel],
            	[Email],
            	[Contact],
            	[Status]
            ) VALUES (
            	@DepartmentID,
            	@DepartmentName,
            	@DepartmentDescription,
            	@Principal,
            	@Address,
            	@Fax,
            	@Tel,
            	@Email,
            	@Contact,
            	@Status
            )
            
            --endregion
            
            
             </code>code>
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDADepartment.UpdateDepartment(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Byte)">
             <summary>
             此函数调用存储过程 spUpdateDepartment 并返回数据库中受影响的记录数
             </summary>
            <param name="departmentID">变量 departmentID: 用于设置参数 '@DepartmentID' 给存储过程spUpdateDepartment </param>	
            <param name="departmentName">变量 departmentName: 用于设置参数 '@DepartmentName' 给存储过程spUpdateDepartment </param>	
            <param name="departmentDescription">变量 departmentDescription: 用于设置参数 '@DepartmentDescription' 给存储过程spUpdateDepartment </param>	
            <param name="principal">变量 principal: 用于设置参数 '@Principal' 给存储过程spUpdateDepartment </param>	
            <param name="address">变量 address: 用于设置参数 '@Address' 给存储过程spUpdateDepartment </param>	
            <param name="fax">变量 fax: 用于设置参数 '@Fax' 给存储过程spUpdateDepartment </param>	
            <param name="tel">变量 tel: 用于设置参数 '@Tel' 给存储过程spUpdateDepartment </param>	
            <param name="email">变量 email: 用于设置参数 '@Email' 给存储过程spUpdateDepartment </param>	
            <param name="contact">变量 contact: 用于设置参数 '@Contact' 给存储过程spUpdateDepartment </param>	
            <param name="status">变量 status: 用于设置参数 '@Status' 给存储过程spUpdateDepartment </param>	
             <returns>受影响的记录数</returns>
             <remarks>
             存储过程源码 [ 存储过程 spUpdateDepartment  ] 如下：
             <code>
             
            --region [dbo].[spUpdateDepartment]
            
            ------------------------------------------------------------------------------------------------------------------------
            
            
            -- Procedure Name: [dbo].[spUpdateDepartment]
            -- Date Generated: 2005年6月6日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spUpdateDepartment]
            	@DepartmentID nvarchar(50),
            	@DepartmentName nvarchar(255),
            	@DepartmentDescription ntext,
            	@Principal nvarchar(64),
            	@Address nvarchar(512),
            	@Fax nvarchar(64),
            	@Tel nvarchar(64),
            	@Email nvarchar(64),
            	@Contact nvarchar(64),
            	@Status tinyint
            AS
            
            SET NOCOUNT ON
            
            UPDATE [dbo].[Department] SET
            	[DepartmentName] = @DepartmentName,
            	[DepartmentDescription] = @DepartmentDescription,
            	[Principal] = @Principal,
            	[Address] = @Address,
            	[Fax] = @Fax,
            	[Tel] = @Tel,
            	[Email] = @Email,
            	[Contact] = @Contact,
            	[Status] = @Status
            WHERE
            	[DepartmentID] = @DepartmentID
            
            --endregion
            
            
             </code>code>
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDADepartment.DeleteDepartment(System.String)">
             <summary>
             此函数调用存储过程 spDeleteDepartment 并返回数据库中受影响的记录数
             </summary>
            <param name="departmentID">变量 departmentID: 用于设置参数 '@DepartmentID' 给存储过程spDeleteDepartment </param>	
             <returns>受影响的记录数</returns>
             <remarks>
             存储过程源码 [ 存储过程 spDeleteDepartment  ] 如下：
             <code>
             
            
            --region [dbo].[spDeleteDepartment]
            
            ------------------------------------------------------------------------------------------------------------------------
            
            
            -- Procedure Name: [dbo].[spDeleteDepartment]
            -- Date Generated: 2005年6月6日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spDeleteDepartment]
            	@DepartmentID nvarchar(50)
            AS
            
            SET NOCOUNT ON
            
            DELETE FROM [dbo].[Department]
            WHERE
            	[DepartmentID] = @DepartmentID
            
            --endregion
            
            
             </code>code>
             </remarks>
        </member>
        <member name="T:Business.SystemConfig.CBLEmployeeManager">
            <summary>
            CEmployeeManager 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.CBLBase">
            <summary>
            CBLBase 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.CBLBase.AddCheck(System.Data.DataTable)">
            <summary>
            新增时的数据校验
            </summary>
            <param name="pDTInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Business.CBLBase.Add(System.Data.DataTable)">
            <summary>
            新增数据到数据库中
            </summary>
            <param name="pDTInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Business.CBLBase.GenerateInsertSql(System.Data.DataTable)">
            <summary>
            产生增加记录的sql语句
            </summary>
            <param name="pDTInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Business.CBLBase.ModifyCheck(System.Data.DataTable)">
            <summary>
            修改数据的校验
            </summary>
            <param name="pDTInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Business.CBLBase.Modify(System.Data.DataTable)">
            <summary>
            修改数据到数据库中
            </summary>
            <param name="pDTInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Business.CBLBase.DeleteCheck(System.Data.DataTable)">
            <summary>
            删除数据校验
            </summary>
            <param name="pDTInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Business.CBLBase.Delete(System.Data.DataTable)">
            <summary>
            从数据库中删除数据
            </summary>
            <param name="pDTInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Business.CBLBase.GenerateDeleteSql(System.Data.DataTable)">
            <summary>
            生成删除数据的sql语句
            </summary>
            <param name="pDTInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Business.BUSVendorPrejudicationResult">
            <summary>
            供应商预审结果业务类 Added By Liujun at 10.20
            </summary>
        </member>
        <member name="T:Business.BUSTCSchedule">
            <summary>
            TC日程的业务逻辑类 Added By Liujun 
            </summary>
        </member>
        <member name="M:Business.BUSTCSchedule.CheckTCReport(System.Data.DataTable)">
            <summary>
            检查TC报告(当不存在TC报告的时候不能保存TC日程)
            </summary>
            <param name="dataTable">TC报告数据表</param>
            <returns>true:数量通过,false:数量不通过</returns>
        </member>
        <member name="M:Business.BUSTCSchedule.CheckHasRepeatTCReport(System.Data.DataTable)">
            <summary>
            检查是否存在相同的TC报告
            </summary>
            <param name="dataTable">TC报告数据表</param>
            <returns>true:没有重复的,false:存在重复的</returns>
        </member>
        <member name="M:Business.BUSTCSchedule.CheckExist(System.String,System.Data.DataTable)">
            <summary>
            是否在TCGroup表中存在
            </summary>
            <returns></returns>
        </member>
        <member name="T:Business.BUSRole">
            <summary>
            BUSRole 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSSealConfig">
            <summary>
            BUSSealConfig 的摘要说明。
            added by QsQ
            </summary>
        </member>
        <member name="F:Business.BUSSealConfig.BUSCHKERR001">
            <summary>
            非密封标的金额不能大于密封标的金额
            </summary>
        </member>
        <member name="M:Business.BUSSealConfig.CheckBusinessLogic_rule(System.Data.DataTable,System.Collections.ArrayList)">
            <summary>
            继承基类的逻辑规则校验并检查非密封标的金额不能大于密封标的金额
            </summary>
            <param name="dt"></param>
            <param name="fieldsList"></param>
            <returns></returns>
        </member>
        <member name="T:Business.BUSWareHouse">
            <summary>
            BUSWareHouse 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSBasicInfoBin">
            <summary>
            BUSBasicTables 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSABCCalssScaleEdit">
            <summary>
            BUSABCCalssScaleEdit 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.BUSABCCalssScaleEdit.ABCIsValid(System.Decimal,System.Decimal,System.Decimal@)">
            <summary>
            判断A,B,C是否合法
            </summary>
            <param name="dAScale"></param>
            <param name="dBScale"></param>
            <param name="dCScale"></param>
            <returns></returns>
        </member>
        <member name="T:Business.BUSTransferDEP2DEPEdit">
            <summary>
            BUSTransferDEP2DEPEdit 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.BUSTransferDEP2DEPEdit.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Business.BUSTransferDEP2DEPEdit.CalTotalAmount(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="dtEdit"></param>
            <param name="dtChild"></param>
        </member>
        <member name="M:Business.BUSTransferDEP2DEPEdit.CheckChildData(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="dtChild"></param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSTransferDEP2DEPEdit.CheckChildRows(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="dtChild"></param>
            <returns></returns>
        </member>
        <member name="T:Business.BUSRejectEdit">
            <summary>
            BUSRejectEdit 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.BUSRejectEdit.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Business.BUSRejectEdit.CheckBusinessData(System.Data.DataTable)">
            <summary>
            校验数据逻辑
            </summary>
            <param name="dt"></param>
            <param name="fieldsList"></param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSRejectEdit.CheckChildRows(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="dt">Edit表</param>
            <returns>sErrMsg</returns>
        </member>
        <member name="T:Business.BUSIssueEdit">
            <summary>
            BUSIssueEdit 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.BUSIssueEdit.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Business.BUSIssueEdit.CheckChildData(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="dt"></param>
            <param name="sErrMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSIssueEdit.CheckChildRows(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="dtBorrowMaterial"></param>
            <returns></returns>
        </member>
        <member name="T:Business.BUSIssue">
            <summary>
            BUSIssue 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSAdjustOutEdit">
            <summary>
            BUSAdjustOutEdit 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.BUSAdjustOutEdit.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Business.BUSAdjustOutEdit.CheckChildData(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="dtEdit"></param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSAdjustOutEdit.CheckChildRows(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="dtChild"></param>
            <returns></returns>
        </member>
        <member name="T:Business.BUSTCStrategy">
            <summary>
            BUSTCStrategy 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSNoFlowContractSign">
            <summary>
            BUSNoFlowContractSign 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.BUSNoFlowContractSign.CheckBusinessData(System.Data.DataTable)">
            <summary>
            校验子表是否有数据
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="T:Business.BUSVendorPrejudication_Edit">
            <summary>
            供应商预审的编辑实体类
            </summary>
        </member>
        <member name="M:Business.BUSVendorPrejudication_Edit.CheckExist(System.String,System.Data.DataTable)">
            <summary>
            是否在WH_MaterialVendor表中存在
            </summary>
            <returns></returns>
        </member>
        <member name="F:Business.BUSVendorPrejudication_Edit.dataEntity">
            <summary>
            数据实体类
            </summary>
        </member>
        <member name="M:Business.BUSVendorPrejudication_Edit.IsRepeatLoginName(System.String,System.String)">
            <summary>
            是否有相同的登录名
            </summary>
            <param name="strLoginName">登录名</param>
            <param name="strIDKey">登陆编号</param>
            <returns>true:有重复,false:无重复</returns>
        </member>
        <member name="T:Business.BUSMaterialCatalog">
            <summary>
            BUSMaterialCatalog 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.BUSMaterialCatalog.CheckChildRows(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="dt">Edit表</param>
            <returns>sErrMsg</returns>
        </member>
        <member name="M:Business.BUSMaterialCatalog.SetTableField(System.Data.DataTable,System.String,System.String,System.String,System.Decimal,System.Decimal)">
            <summary>
            
            </summary>
            <param name="dtEdit"></param>
            <param name="parentID"></param>
            <param name="sCode"></param>
            <param name="sViewParentCatalog"></param>
            <param name="dNowLevel"></param>
            <param name="dLevel"></param>
        </member>
        <member name="M:Business.BUSMaterialCatalog.GetNextDeep(System.String)">
            <summary>
            
            </summary>
            <param name="CatalogID"></param>
            <returns></returns>
        </member>
        <member name="T:Business.BUSMaxMinMaterial">
            <summary>
            BUSMaxMinMaterial 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSAdjustOut">
            <summary>
            BUSAdjustOut 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.BUSAdjustOut.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Business.BUSContractCatagory">
            <summary>
            合同类别的业务逻辑类 Added by Liujun at 11.17
            </summary>
        </member>
        <member name="F:Business.BUSContractCatagory.dataEntity">
            <summary>
            数据实体层
            </summary>
        </member>
        <member name="M:Business.BUSContractCatagory.IsRepeatDescription(System.String,System.String,System.String)">
            <summary>
            在同一级别下是否又相同的描述
            </summary>
            <param name="strContractDescription">合同类型描述</param>
            <param name="strConID">主键</param>
            <param name="strParentID">父ID</param>
            <returns>true:合同描述重复,false:合同描述未重复</returns>
        </member>
        <member name="T:Business.BUSMaterialCatalogEdit">
            <summary>
            BUSMaterialCatalogEdit 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSDocumentModelCategory">
            <summary>
            BUSDocumentModelCategory 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSMaxMinMaterialEdit">
            <summary>
            BUSMaxMinMaterialEdit 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.BUSMaxMinMaterialEdit.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Business.BUSApproveProcessing_Edit">
            <summary>
            审批处理(编辑界面)的逻辑类
            </summary>
        </member>
        <member name="T:Business.BUSABCClass">
            <summary>
            BUSABCClass 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSCheckStock">
            <summary>
            BUSCheckStock 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSContractExecute">
            <summary>
            BUSContractExecute 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSReturn">
            <summary>
            BUSReturn 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSTCStrategy_Edit">
            <summary>
            BUSTCStrategy_Edit 的摘要说明。
            </summary>
        </member>
        <member name="F:Business.BUSTCStrategy_Edit.cEntity">
            <summary>
            数据实体通用类
            </summary>
        </member>
        <member name="M:Business.BUSTCStrategy_Edit.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Business.BUSTCStrategy_Edit.CheckExist(System.String,System.Data.DataTable)">
            <summary>
            是否在表dtViewer中存在
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.BUSTCStrategy_Edit.IsHidenControl(System.String,System.Decimal)">
            <summary>
            验证根据项目的金额是否需要隐藏部分控件
            </summary>
            <param name="CurrencyIDFrom">项目使用的货币单位</param>
            <returns>1:显示,:0不显示,-1不存在对应汇率</returns>
        </member>
        <member name="M:Business.BUSTCStrategy_Edit.IsHidenControl(System.Data.DataTable,System.Decimal@)">
            <summary>
            计算SR中计划金额的合计值(计算汇率)与配置文件中的标准比较后确定是否显示部分控件 
            </summary>
            <param name="dt">策略相关SR子表</param>
            <param name="dAmount">计划金额合计值</param>
            <returns></returns>
        </member>
        <member name="T:Business.BUSVendorMaterial">
            <summary>
            BUSVendorMaterial 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.BUSVendorMaterial.CheckExist(System.String,System.Data.DataTable)">
            <summary>
            是否在WH_MaterialVendor表中存在
            </summary>
            <returns></returns>
        </member>
        <member name="T:Business.BUSOperationhistory">
            <summary>
            BUSOperationhistory 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSPOBidFlow">
            <summary>
            BUSMaterialRequest 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.BUSPOBidFlow.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Business.BUSPOBidFlow.CheckChildRows(System.Data.DataTable)">
            <summary>
            验证借料子表中借料的数量是否大于库存数量
            </summary>
            <param name="dt">Edit表</param>
            <returns>sErrMsg</returns>
        </member>
        <member name="M:Business.BUSPOBidFlow.CheckExist(System.String,System.Data.DataTable)">
            <summary>
            是否在SeePerson表中存在
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.BUSPOBidFlow.GetUserDepartmentID(System.String)">
            <param name="sCurrentUserID">登陆编号</param>
            <returns>popedomDepID</returns>
        </member>
        <member name="T:Business.BUSDefaultTCGroup">
            <summary>
            默认审批小组逻辑类
            </summary>
        </member>
        <member name="M:Business.BUSDefaultTCGroup.CheckChildRows(System.Data.DataTable)">
            <summary>
            校验是否有委员会成员
            </summary>
            <param name="dtChild"></param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSDefaultTCGroup.CheckBusinessData(System.Data.DataTable,System.Collections.ArrayList)">
            <summary>
            校验数据
            </summary>
            <param name="dt"></param>
            <param name="fieldsList"></param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSDefaultTCGroup.CheckBusinessLogic_calculate(System.Data.DataTable,System.Collections.ArrayList)">
            <summary>
            校验计算
            </summary>
            <param name="dt"></param>
            <param name="fieldsList"></param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSDefaultTCGroup.CheckBusinessLogic_rule(System.Data.DataTable,System.Collections.ArrayList)">
            <summary>
            校验业务规则
            </summary>
            <param name="dt"></param>
            <param name="fieldsList"></param>
            <returns></returns>
        </member>
        <member name="T:Business.CDADesktop">
            <summary>
            CDADesktop 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSFileSubmit">
            <summary>
            BUSFileSubmit 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.SystemConfig.CBLBasicTableManager">
            <summary>
            CBLBasicTableManager 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.SystemConfig.CBLBasicTableManager.Add(System.Data.DataTable)">
            <summary>
            新增数据到数据库中
            </summary>
            <param name="pDTInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Business.BUSVendorContract">
            <summary>
            BUSVendorContract 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSVenderList">
            <summary>
            供应商名录业务类 ( Added By Liujun at 10.24 )
            </summary>
        </member>
        <member name="T:Business.BUSMaterialCodeEdit">
            <summary>
            BUSMaterialCodeEdit 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.BUSMaterialCodeEdit.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Business.BUSMaterialCodeEdit.CheckChildRows(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="dtChild"></param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSMaterialCodeEdit.IsUOMID(System.String)">
            <summary>
            判断 当前的单位是否在子表中已经存在（IsBaseUOM = 0）
            </summary>
            <param name="sPKValue"></param>
            <returns></returns>
        </member>
        <member name="T:Business.BUSDocumentModelCategoryEdit">
            <summary>
            BUSDocumentModelCategoryEdit 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSTenderPlan">
            <summary>
            招标计划(浏览界面)的逻辑类
            </summary>
        </member>
        <member name="T:Business.BUSImportantMaterial">
            <summary>
            BUSImportantMaterial 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSTransferBin2Bin">
            <summary>
            BUSTransferBin2Bin 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSReturnEdit">
            <summary>
            BUSReturnEdit 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.BUSReturnEdit.CalTotalAmount(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            计算借料核算和本位总额
            </summary>
            <param name="dtBorrowEdit">Edit表</param>
            <param name="decTotalAmountStandard">核算总额</param>
            <param name="decTotalAmountNatural">本位总额</param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSReturnEdit.CheckBusinessData(System.Data.DataTable)">
            <summary>
            校验数据逻辑
            </summary>
            <param name="dt"></param>
            <param name="fieldsList"></param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSReturnEdit.CheckChildRows(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="dtChild"></param>
            <returns></returns>
        </member>
        <member name="T:Business.BUSVendorGradeEvaluateStandard">
            <summary>
            BUSVendorGradeEvaluateStandard 的摘要说明。
            Added by QSQ 10.16
            </summary>
        </member>
        <member name="T:Business.MaterialPurchase.BUSQuotation">
            <summary>
            页面: 报价单
            类型: 业务实体类
            操作时间: 2007-10-15
            操作人员: 刘俊
            </summary>
        </member>
        <member name="M:Business.MaterialPurchase.BUSQuotation.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Business.MaterialPurchase.BUSQuotation.GetUserDepartmentID(System.String)">
            <param name="sCurrentUserID">登陆编号</param>
            <returns>popedomDepID</returns>
        </member>
        <member name="M:Business.MaterialPurchase.BUSQuotation.CalTotalAmount(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            计算总价
            </summary>
            <param name="dtEdit">主表数据表</param>
            <param name="dtChild">子表数据表</param>
        </member>
        <member name="M:Business.MaterialPurchase.BUSQuotation.CalculateByER(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            按汇率计算其他
            </summary>
            <param name="dt">数据表</param>
        </member>
        <member name="M:Business.MaterialPurchase.BUSQuotation.CheckQuotationNo(System.Data.DataTable)">
            <summary>
            检查报价单编号是否唯一(因为已经为编辑状态,不对业务主键进行判断了)
            </summary>
        </member>
        <member name="M:Business.MaterialPurchase.BUSQuotation.CheckBusinessLogic_rule(System.Data.DataTable,System.Collections.ArrayList)">
            <summary>
            数据校验
            </summary>
            <param name="dt"></param>
            <param name="fieldsList"></param>
            <returns></returns>
        </member>
        <member name="M:Business.MaterialPurchase.BUSQuotation.UpdateMRQuotationPriceState(System.Data.DataTable)">
            <summary>
            当报价结束的时候同步更新MR中物资的状态
            </summary>
            <param name="dt"></param>
        </member>
        <member name="T:Business.BUSGetExcelData">
            <summary>
            BUSGetExcelData 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSImportantMaterialEdit">
            <summary>
            BUSImportantMaterialEdit 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSAFEEdit">
            <summary>
            BUSAFEEdit 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSBorrowEdit">
            <summary>
            BUSBorrowEdit 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.BUSBorrowEdit.CalTotalAmount(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            计算借料核算和本位总额
            </summary>
            <param name="dtBorrowEdit">Edit表</param>
            <param name="decTotalAmountStandard">核算总额</param>
            <param name="decTotalAmountNatural">本位总额</param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSBorrowEdit.CheckChildData(System.Data.DataTable)">
            <summary>
            验证借料子表中借料的数量是否大于库存数量
            </summary>
            <param name="dtBorrowMaterial">子表</param>
            <returns>sErrMsg</returns>
        </member>
        <member name="M:Business.BUSBorrowEdit.CheckChildRows(System.Data.DataTable)">
            <summary>
            验证借料子表中借料的数量是否大于库存数量
            </summary>
            <param name="dt">Edit表</param>
            <returns>sErrMsg</returns>
        </member>
        <member name="T:Business.BUSInStoreMaterialDetail">
            <summary>
            BUSInStoreMaterialDetail 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.BUSInStoreMaterialDetail.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Business.BUSAdjustIn">
            <summary>
            BUSAdjustIn 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSTenderEvaluation">
            <summary>
            BUSTenderEvaluation 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.BUSTenderEvaluation.CheckExist(System.String,System.Data.DataTable)">
            <summary>
            是否在SeePerson表中存在
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.BUSTenderEvaluation.CheckExist(System.String,System.Data.DataTable,System.String)">
            <summary>
            是否已经存在
            </summary>
            <param name="strIDKey">人员</param>
            <param name="dt_Temp">数据表</param>
            <param name="strIDKeyName">主键列名</param>
            <returns></returns>
        </member>
        <member name="T:Business.SystemInit.CDASystemInit">
            <summary>
            Database access functions about system initialization
            </summary>
        </member>
        <member name="M:Business.SystemInit.CDASystemInit.#ctor">
            <summary>
            database access class about system init
            </summary>
        </member>
        <member name="M:Business.SystemInit.CDASystemInit.SelectSysInitStatus">
             <summary>
             此函数调用存储过程 spSelectSysInitStatus 并返回包含记录的数据读取器.
             </summary>
             <returns>byte</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectSysInitStatus  ] 如下：
             <code>
             
            --endregion
            
            --region [dbo].[spSelectSysInitStatus]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spSelectSysInitStatus]
            -- Date Generated: 2005年6月9日
            ------------------------------------------------------------------------------------------------------------------------
            
            
            create procedure spSelectSysInitStatus
            as
            select 
            	top 1 
            	InitStatus 
            	from 
            	SysInitStatus
            
             </code>
             结果集中的列包括:
             SqlByte InitStatus,
             </remarks>
        </member>
        <member name="M:Business.SystemInit.CDASystemInit.IsSystemInitFinished">
            <summary>
            function to get wether the system init has finished
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.SystemInit.CDASystemInit.InsertUpdateSysInitStatus(System.Byte,System.Byte)">
             <summary>
             此函数调用存储过程 spInsertUpdateSysInitStatus 并返回数据库中受影响的记录数
             </summary>
            <param name="initStatus">变量 initStatus: 用于设置参数 '@InitStatus' 给存储过程spInsertUpdateSysInitStatus </param>	
             <returns>受影响的记录数</returns>
             <remarks>
             存储过程源码 [ 存储过程 spInsertUpdateSysInitStatus  ] 如下：
             <code>
             --endregion
            
            
            --region [dbo].[spInsertUpdateSysInitStatus]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spInsertUpdateSysInitStatus]
            -- Date Generated: 2005年6月13日
            ------------------------------------------------------------------------------------------------------------------------
            
            --
            create procedure spInsertUpdateSysInitStatus
            	@InitStatus tinyint
            as
            if exists (select * from SysInitStatus)
            begin
            	update  
            		SysInitStatus 
            	set
            		InitStatus = @InitStatus
            end
            else
            begin
            	insert into SysInitStatus(InitStatus)
            	values(@InitStatus)
            end
            
            
             </code>
             </remarks>
        </member>
        <member name="M:Business.SystemInit.CDASystemInit.SelectSysCurrency">
             <summary>
             此函数调用存储过程 spSelectSysCurrency 并返回包含记录的数据读取器.
             </summary>
             <returns>SqlDataReader</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectSysCurrency  ] 如下：
             <code>
             --endregion
            
            
            --region [dbo].[spSelectSysCurrency]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spSelectSysCurrency]
            -- Date Generated: 2005年6月9日
            ------------------------------------------------------------------------------------------------------------------------
            
            
            create procedure spSelectSysCurrency
            as
            select 
            	top 1 
            	NaturalCurrencyID,
            	StandardCurrencyID 
            from 
            	SysCurrency
            
             </code>
             结果集中的列包括:
             SqlString NaturalCurrencyID, SqlString StandardCurrencyID,
             </remarks>
        </member>
        <member name="M:Business.SystemInit.CDASystemInit.InsertUpdateSysCurrency(System.String,System.String)">
             <summary>
             此函数调用存储过程 spInsertUpdateSysCurrency 并返回数据库中受影响的记录数
             </summary>
            <param name="naturalCurrencyID">变量 naturalCurrencyID: 用于设置参数 '@NaturalCurrencyID' 给存储过程spInsertUpdateSysCurrency </param>	
            <param name="standardCurrencyID">变量 standardCurrencyID: 用于设置参数 '@StandardCurrencyID' 给存储过程spInsertUpdateSysCurrency </param>	
             <returns>受影响的记录数</returns>
             <remarks>
             存储过程源码 [ 存储过程 spInsertUpdateSysCurrency  ] 如下：
             <code>
             --endregion
            
            
            --region [dbo].[spInsertUpdateSysCurrency]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spInsertUpdateSysCurrency]
            -- Date Generated: 2005年6月13日
            ------------------------------------------------------------------------------------------------------------------------
            
            create procedure spInsertUpdateSysCurrency
            	@NaturalCurrencyID nvarchar(10),
            	@StandardCurrencyID nvarchar(10)
            as
            if exists(select * from SysCurrency)
            begin
            update
            	SysCurrency
            set
            	NaturalCurrencyID=@NaturalCurrencyID,
            	StandardCurrencyID=@StandardCurrencyID
            	
            end
            else
            begin
            	insert into 
            		SysCurrency(NaturalCurrencyID,StandardCurrencyID)
            	values
            		(@NaturalCurrencyID,@StandardCurrencyID)	
            end
            
            
             </code>
             </remarks>
        </member>
        <member name="M:Business.SystemInit.CDASystemInit.SelectSysMaterialIDConfig">
             <summary>
             此函数调用存储过程 spSelectSysMaterialIDConfig 并返回包含记录的数据读取器.
             </summary>
             <returns>SqlDataReader</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectSysMaterialIDConfig  ] 如下：
             <code>
             
            --endregion
            
            --region [dbo].[spSelectSysMaterialIDConfig]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spSelectSysMaterialIDConfig]
            -- Date Generated: 2005年6月9日
            ------------------------------------------------------------------------------------------------------------------------
            
            
            create procedure spSelectSysMaterialIDConfig
            as
            select  top 1 
            	MaterialIDLength,
            	MaterialIDSegNumber
            	from 
            	SysMaterialIDConfig
            
             </code>
             结果集中的列包括:
             SqlInt16 MaterialIDLength, SqlInt16 MaterialIDSegNumber,
             </remarks>
        </member>
        <member name="M:Business.SystemInit.CDASystemInit.SelectSysMaterialIDConfigBakVersion">
            <summary>
            获取内置预留的配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.SystemInit.CDASystemInit.InsertUpdateSysMaterialIDConfig(System.Int16,System.Int16)">
             <summary>
             此函数调用存储过程 spInsertUpdateSysMaterialIDConfig 并返回数据库中受影响的记录数
             </summary>
            <param name="materialIDLength">变量 materialIDLength: 用于设置参数 '@MaterialIDLength' 给存储过程spInsertUpdateSysMaterialIDConfig </param>	
            <param name="materialIDSegNumber">变量 materialIDSegNumber: 用于设置参数 '@MaterialIDSegNumber' 给存储过程spInsertUpdateSysMaterialIDConfig </param>	
             <returns>受影响的记录数</returns>
             <remarks>
             存储过程源码 [ 存储过程 spInsertUpdateSysMaterialIDConfig  ] 如下：
             <code>
             --endregion
            
            
            --region [dbo].[spInsertUpdateSysMaterialIDConfig]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spInsertUpdateSysMaterialIDConfig]
            -- Date Generated: 2005年6月13日
            ------------------------------------------------------------------------------------------------------------------------
            
            --
            create procedure spInsertUpdateSysMaterialIDConfig
            	@MaterialIDLength smallint,
            	@MaterialIDSegNumber smallint
            as
            if exists (select * from SysMaterialIDConfig)
            begin
            	update  
            		SysMaterialIDConfig 
            	set
            		MaterialIDLength = @MaterialIDLength,
            		MaterialIDSegNumber = @MaterialIDSegNumber
            end
            else
            begin
            	insert into SysMaterialIDConfig(MaterialIDLength,MaterialIDSegNumber)
            	values(@MaterialIDLength,@MaterialIDSegNumber)
            end
            
            
             </code>
             </remarks>
        </member>
        <member name="M:Business.SystemInit.CDASystemInit.DeleteSysMaterialIDSegConfigsAll">
             <summary>
             此函数调用存储过程 spDeleteSysMaterialIDSegConfigsAll 并返回数据库中受影响的记录数
             </summary>
             <returns>受影响的记录数</returns>
             <remarks>
             存储过程源码 [ 存储过程 spDeleteSysMaterialIDSegConfigsAll  ] 如下：
             <code>
             --endregion
            
            
            
            --region [dbo].[spDeleteSysMaterialIDSegConfigsAll]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spDeleteSysMaterialIDSegConfigsAll]
            -- Date Generated: 2005年6月13日
            ------------------------------------------------------------------------------------------------------------------------
            
            --
            create procedure spDeleteSysMaterialIDSegConfigsAll
            	
            as
            if exists (select * from SysMaterialIDSegConfig)
            begin
            	delete from SysMaterialIDSegConfig
            end
            
             </code>
             </remarks>
        </member>
        <member name="M:Business.SystemInit.CDASystemInit.SelectSysMaterialIDSegConfig(System.Int16)">
             <summary>
             此函数调用存储过程 spSelectSysMaterialIDSegConfig 并返回包含记录的数据读取器.
             </summary>
             <param name="segID" ></param>
             <returns>SqlDataReader</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectSysMaterialIDSegConfig  ] 如下：
             <code>
             --endregion
            
            
            
            
            --region [dbo].[spSelectSysMaterialIDSegConfig]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spSelectSysMaterialIDSegConfig]
            -- Date Generated: 2005年6月13日
            ------------------------------------------------------------------------------------------------------------------------
            
            --
            create procedure spSelectSysMaterialIDSegConfig
            					 @SegID smallint
            								as
            select
            	SegID,
            	StartIndex,
            	Length,
            	SegFormula,
            	FullSegFormula,
            	SegDescription,
            	IsLeafClassSeg,
            	IsLeafSeg
            	from
            	SysMaterialIDSegConfig
            		where
            		SegID=@SegID
            				  go
             </code>
             结果集中的列包括:
             SqlInt16 SegID, SqlInt16 StartIndex, SqlInt16 Length, SqlString SegFormula, SqlString FullSegFormula, SqlString SegDescription, SqlBoolean IsLeafClassSeg, SqlBoolean IsLeafSeg,
             </remarks>
        </member>
        <member name="M:Business.SystemInit.CDASystemInit.SelectSysMaterialIDLeafSegConfig">
             <summary>
             此函数调用存储过程 spSelectSysMaterialIDLeafSegConfig 并返回包含记录的数据读取器.
             </summary>
             <returns>SqlDataReader</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectSysMaterialIDLeafSegConfig  ] 如下：
             <code>
             --endregion
            
            
            --region [dbo].[spSelectSysMaterialIDLeafSegConfig]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spSelectSysMaterialIDLeafSegConfig]
            -- Date Generated: 2005年6月13日
            ------------------------------------------------------------------------------------------------------------------------
            
            --
            create procedure spSelectSysMaterialIDLeafSegConfig
            	
            as
            select
            	SegID,
            	StartIndex,
            	Length,
            	SegFormula,
            	FullSegFormula,
            	SegDescription,
            	IsLeafClassSeg,
            	IsLeafSeg
            from
            	SysMaterialIDSegConfig
            where
            	IsLeafSeg=1
            
             </code>
             结果集中的列包括:
             SqlInt16 SegID, SqlInt16 StartIndex, SqlInt16 Length, SqlString SegFormula, SqlString FullSegFormula, SqlString SegDescription, SqlBoolean IsLeafClassSeg, SqlBoolean IsLeafSeg,
             </remarks>
        </member>
        <member name="M:Business.SystemInit.CDASystemInit.SelectSysMaterialIDSegConfigsAll">
             <summary>
             此函数调用存储过程 spSelectSysMaterialIDSegConfigsAll 并返回包含记录的数据读取器.
             </summary>
             <returns>SqlDataReader</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectSysMaterialIDSegConfigsAll  ] 如下：
             <code>
             --endregion
            
            
            
            
            --region [dbo].[spSelectSysMaterialIDSegConfigsAll]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spSelectSysMaterialIDSegConfigsAll]
            -- Date Generated: 2005年6月13日
            ------------------------------------------------------------------------------------------------------------------------
            
            --
            create procedure spSelectSysMaterialIDSegConfigsAll
            	
            as
            select
            	SegID,
            	StartIndex,
            	Length,
            	SegFormula,
            	FullSegFormula,
            	SegDescription,
            	IsLeafClassSeg,
            	IsLeafSeg
            from
            	SysMaterialIDSegConfig
            
             </code>
             结果集中的列包括:
             SqlInt16 SegID, SqlInt16 StartIndex, SqlInt16 Length, SqlString SegFormula, SqlString FullSegFormula, SqlString SegDescription, SqlBoolean IsLeafClassSeg, SqlBoolean IsLeafSeg,
             </remarks>
        </member>
        <member name="M:Business.SystemInit.CDASystemInit.SelectSysMaterialIDSegConfigsBakVersionAll">
            select
            	SegID,
            	StartIndex,
            	Length,
            	SegFormula,
            	FullSegFormula,
            	SegDescription,
            	IsLeafClassSeg,
            	IsLeafSeg
            from
            	SysMaterialIDSegConfig
        </member>
        <member name="M:Business.SystemInit.CDASystemInit.InsertSysMaterialIDSegConfig(System.Int16,System.Int16,System.Int16,System.String,System.String,System.String,System.Boolean,System.Boolean)">
             <summary>
             此函数调用存储过程 spInsertSysMaterialIDSegConfig 并返回数据库中受影响的记录数
             </summary>
            <param name="segID">变量 segID: 用于设置参数 '@SegID' 给存储过程spInsertSysMaterialIDSegConfig </param>	
            <param name="startIndex">变量 startIndex: 用于设置参数 '@StartIndex' 给存储过程spInsertSysMaterialIDSegConfig </param>	
            <param name="length">变量 length: 用于设置参数 '@Length' 给存储过程spInsertSysMaterialIDSegConfig </param>	
            <param name="segFormula">变量 segFormula: 用于设置参数 '@SegFormula' 给存储过程spInsertSysMaterialIDSegConfig </param>	
            <param name="fullSegFormula">变量 fullSegFormula: 用于设置参数 '@FullSegFormula' 给存储过程spInsertSysMaterialIDSegConfig </param>	
            <param name="segDescription">变量 segDescription: 用于设置参数 '@SegDescription' 给存储过程spInsertSysMaterialIDSegConfig </param>	
            <param name="isLeafClassSeg">变量 isLeafClassSeg: 用于设置参数 '@IsLeafClassSeg' 给存储过程spInsertSysMaterialIDSegConfig </param>	
            <param name="isLeafSeg">变量 isLeafSeg: 用于设置参数 '@IsLeafSeg' 给存储过程spInsertSysMaterialIDSegConfig </param>	
             <returns>受影响的记录数</returns>
             <remarks>
             存储过程源码 [ 存储过程 spInsertSysMaterialIDSegConfig  ] 如下：
             <code>
             --endregion
            
            
            
            
            --region [dbo].[spInsertSysMaterialIDSegConfig]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spInsertSysMaterialIDSegConfig]
            -- Date Generated: 2005年6月13日
            ------------------------------------------------------------------------------------------------------------------------
            
            --
            create procedure spInsertSysMaterialIDSegConfig
            	@SegID smallint,
            	@StartIndex smallint,
            	@Length smallint,
            	@SegFormula nvarchar(32),
            	@FullSegFormula nvarchar(32),
            	@SegDescription nvarchar(100),
            	@IsLeafClassSeg bit,
            	@IsLeafSeg bit
            	
            as
            insert into SysMaterialIDSegConfig
            (
            	SegID,
            	StartIndex,
            	Length,
            	SegFormula,
            	FullSegFormula,
            	SegDescription,
            	IsLeafClassSeg,
            	IsLeafSeg
            )
            values
            (
            	@SegID,
            	@StartIndex,
            	@Length,
            	@SegFormula,
            	@FullSegFormula,
            	@SegDescription,
            	@IsLeafClassSeg,
            	@IsLeafSeg
            )
            
             </code>
             </remarks>
        </member>
        <member name="T:Business.SystemConfig.CDAProject">
            <summary>
            Data Access Class of Table 'Project',Maintain the Project(System) Infor
            
            </summary>
            <remarks>
            项目指的是使用该系统的项目，即系统用户。因此一个系统中有且仅有一条项目信息
            该信息在系统安装时加入，在系统运行时只能进行联系方式等附加信息的修改，不能修改项目编号
            </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDAProject.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Business.SystemConfig.CDAProject.SelectProject">
             <summary>
             此函数调用存储过程 spGetProject 并返回包含记录的数据读取器.
             </summary>
             <returns>SqlDataReader</returns>
             <remarks>
             存储过程源码 [ 存储过程 spGetProject  ] 如下：
             <code>
             --endregion
            --region [dbo].[spGetProject]
            
            CREATE PROCEDURE [dbo].[spGetProject]
            AS
            SET NOCOUNT ON
            
            SELECT
            	top 1	
            	[ProjectID],
            	[ProjectName],
            	[ShortName],
            	[Address],
            	[Fax],
            	[Tel],
            	[Email],
            	[Contact]
            FROM
            	[dbo].[Project]
            
            
             </code>code>
             结果集中的列包括:
             SqlString ProjectID, SqlString ProjectName, SqlString ShortName, SqlString Address, SqlString Fax, SqlString Tel, SqlString Email, SqlString Contact,
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDAProject.GetProjectName">
            <summary>
            get the project name
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.SystemConfig.CDAProject.GetProjectShortName">
            <summary>
            get the project name
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.SystemConfig.CDAProject.AddOrUpdateProject(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             此函数调用存储过程 spAddOrUpdateProject 并返回数据库中受影响的记录数
             </summary>
            <param name="projectID">变量 projectID: 用于设置参数 '@ProjectID' 给存储过程spAddOrUpdateProject </param>	
            <param name="projectName">变量 projectName: 用于设置参数 '@ProjectName' 给存储过程spAddOrUpdateProject </param>	
            <param name="shortName">变量 shortName: 用于设置参数 '@ShortName' 给存储过程spAddOrUpdateProject </param>	
            <param name="address">变量 address: 用于设置参数 '@Address' 给存储过程spAddOrUpdateProject </param>	
            <param name="fax">变量 fax: 用于设置参数 '@Fax' 给存储过程spAddOrUpdateProject </param>	
            <param name="tel">变量 tel: 用于设置参数 '@Tel' 给存储过程spAddOrUpdateProject </param>	
            <param name="email">变量 email: 用于设置参数 '@Email' 给存储过程spAddOrUpdateProject </param>	
            <param name="contact">变量 contact: 用于设置参数 '@Contact' 给存储过程spAddOrUpdateProject </param>	
             <returns>受影响的记录数</returns>
             <remarks>
             存储过程源码 [ 存储过程 spAddOrUpdateProject  ] 如下：
             <code>
             create procedure spAddOrUpdateProject
            	@ProjectID nvarchar(32),
            	@ProjectName nvarchar(512),
            	@ShortName nvarchar(256),
            	@Address nvarchar(512),
            	@Fax nvarchar(64),
            	@Tel nvarchar(64),
            	@Email nvarchar(64),
            	@Contact nvarchar(64)
            as
            	if exists (select * from Project)
            		update Project
            		set ProjectID=@ProjectID,ProjectName=@ProjectName,
            		ShortName=@ShortName,Address=@Address,Fax=@Fax,
            		Tel=@Tel,Email=@Email,Contact=@Contact
            	else
            		insert into Project(ProjectID,ProjectName,ShortName,Address,Fax,
            		Tel,Email,Contact)
            		values(@ProjectID,@ProjectName,@ShortName,@Address,@Fax,
            		@Tel,@Email,@Contact)
            
             </code>code>
             </remarks>
        </member>
        <member name="T:Business.BUSVendorSubmit">
            <summary>
            BUSVendorSubmit 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSTenderPlan_Edit">
            <summary>
            招标计划(编辑界面)的逻辑类
            </summary>
        </member>
        <member name="M:Business.BUSTenderPlan_Edit.CheckChildRows(System.Data.DataTable)">
            <summary>
            校验是否有委员会成员
            </summary>
            <param name="dtChild"></param>
            <returns></returns>
        </member>
        <member name="T:Business.BUSBBin">
            <summary>
            BUSBBin 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSBasicInfoWareHouseEmployee_Edit">
            <summary>
            BUSBITables
            Modified by QSQ 10.30
            </summary>
        </member>
        <member name="M:Business.BUSBasicInfoWareHouseEmployee_Edit.getNum(System.String)">
            <summary>
            得到查询记录数目
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="T:Business.BUSABCCalssScale">
            <summary>
            BUSABCCalssScale 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.BUSABCCalssScale.GetNum">
            <summary>
            得到查询记录数目
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="T:Topis.Common.CMD5Encrypt">
            <summary>
            该类包含系统使用的md5散列加密函数
            </summary>
        </member>
        <member name="M:Topis.Common.CMD5Encrypt.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Topis.Common.CMD5Encrypt.EncryptData(System.String)">
            <summary>
            计算字符串的md5散列值
            </summary>
            <param name="data">要加密（计算散列）的字符串</param>
            <returns>md5散列值</returns>
        </member>
        <member name="M:Topis.Common.CMD5Encrypt.GetEncryptString(System.String)">
            <summary>
            计算字符串的md5散列值
            </summary>
            <param name="data">要加密（计算散列）的字符串</param>
            <returns>md5字符串</returns>
        </member>
        <member name="T:Business.BUSBorrow">
            <summary>
            BUSBorrow 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSTenderExpiry_Edit">
            <summary>
            BUSTenderExpiry_Edit 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSITBDocument">
            <summary>
            BUSITBDocument 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSReject">
            <summary>
            BUSReject 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.WareHouseManagment.BUSReceive">
            <summary>
            收料业务逻辑类 Liujun Add at 2007-6-22
            </summary>
        </member>
        <member name="M:Business.WareHouseManagment.BUSReceive.#ctor">
            <summary>
            收料业务逻辑类
            </summary>
        </member>
        <member name="M:Business.WareHouseManagment.BUSReceive.GetPOIDFilter">
            <summary>
            获得订单编号的筛选条件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.WareHouseManagment.BUSReceive.GetWHIDFilter">
            <summary>
            获得库房ID的筛选条件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.WareHouseManagment.BUSReceive.GetBINIDFilter(System.String)">
            <summary>
            根据库房获得对应库位的筛选条件
            </summary>
            <param name="sWHID">WHID</param>
            <returns></returns>
        </member>
        <member name="M:Business.WareHouseManagment.BUSReceive.CheckChildData(System.Data.DataTable)">
            <summary>
            校验实收数量的累加是否大于可收数量
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Business.WareHouseManagment.BUSReceive.CheckChildRows(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="dtChild"></param>
            <returns></returns>
        </member>
        <member name="M:Business.WareHouseManagment.BUSReceive.CalTotalAmount(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="dtEdit"></param>
            <param name="dtChild"></param>
        </member>
        <member name="T:Business.WareHouseManagment.ReceiveMaterialEntity">
            <summary>
             收料实体
            </summary>
        </member>
        <member name="P:Business.WareHouseManagment.ReceiveMaterialEntity.ItemCode">
            <summary>
            物资编码
            </summary>
        </member>
        <member name="P:Business.WareHouseManagment.ReceiveMaterialEntity.CanReceivedQuantity">
            <summary>
            可收数量
            </summary>
        </member>
        <member name="P:Business.WareHouseManagment.ReceiveMaterialEntity.FactReceiveQuantity">
            <summary>
            实收数量
            </summary>
        </member>
        <member name="T:Business.SystemConfig.CDASystemLog">
            <summary>
            Summary description for CDASystemLog.
            </summary>
        </member>
        <member name="M:Business.SystemConfig.CDASystemLog.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Business.SystemConfig.CDASystemLog.InsertSystemLog(System.String,System.String,System.DateTime,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             此函数调用存储过程 spInsertSystemLog stored procedure and return the log id
             </summary>
            <param name="sessionID">变量 sessionID: 用于设置参数 '@SessionID' 给存储过程spInsertSystemLog </param>	
            <param name="userID">变量 userID: 用于设置参数 '@UserID' 给存储过程spInsertSystemLog </param>	
            <param name="logTime">变量 logTime: 用于设置参数 '@LogTime' 给存储过程spInsertSystemLog </param>	
            <param name="moduleID">变量 moduleID: 用于设置参数 '@ModuleID' 给存储过程spInsertSystemLog </param>	
            <param name="logType">变量 logType: 用于设置参数 '@LogType' 给存储过程spInsertSystemLog </param>	
            <param name="logDescription">变量 logDescription: 用于设置参数 '@LogDescription' 给存储过程spInsertSystemLog </param>	
            <param name="logIP">变量 logIP: 用于设置参数 '@LogIP' 给存储过程spInsertSystemLog </param>	
            <param name="platform">变量 platform: 用于设置参数 '@Platform' 给存储过程spInsertSystemLog </param>	
            <param name="browserVersion">变量 browserVersion: 用于设置参数 '@BrowserVersion' 给存储过程spInsertSystemLog </param>	
            <param name="language">变量 language: 用于设置参数 '@Language' 给存储过程spInsertSystemLog </param>	
             <returns>Log ID</returns>
             <remarks>
             存储过程源码 [ 存储过程 spInsertSystemLog  ] 如下：
             <code>
             
            --region [dbo].[spInsertSystemLog]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spInsertSystemLog]
            -- Date Generated: 2005年6月8日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spInsertSystemLog]
            	@SessionID nvarchar(100),
            	@UserID nvarchar(32),
            	@LogTime datetime,
            	@ModuleID nvarchar(100),
            	@LogType nvarchar(50),
            	@LogDescription nvarchar(500),
            	@LogIP nvarchar(50),
            	@Platform nvarchar(50),
            	@BrowserVersion nvarchar(50),
            	@Language nvarchar(50),
            	@ID bigint OUTPUT
            AS
            
            --SET NOCOUNT ON
            
            INSERT INTO [dbo].[SystemLog] (
            	[SessionID],
            	[UserID],
            	[LogTime],
            	[ModuleID],
            	[LogType],
            	[LogDescription],
            	[LogIP],
            	[Platform],
            	[BrowserVersion],
            	[Language]
            ) VALUES (
            	@SessionID,
            	@UserID,
            	@LogTime,
            	@ModuleID,
            	@LogType,
            	@LogDescription,
            	@LogIP,
            	@Platform,
            	@BrowserVersion,
            	@Language
            )
            
            SET @ID = SCOPE_IDENTITY()
            
            --endregion
            
            
             </code>
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDASystemLog.SelectSystemLogsByUserID(System.String,System.DateTime,System.DateTime)">
             <summary>
             此函数调用存储过程 spSelectSystemLogsByUserID 并返回包含记录的数据读取器.
             </summary>
            <param name="userID">变量 userID: 用于设置参数 '@UserID' 给存储过程spSelectSystemLogsByUserID </param>	
            <param name="beginDate">变量 beginDate: 用于设置参数 '@BeginDate' 给存储过程spSelectSystemLogsByUserID </param>	
            <param name="endDate">变量 endDate: 用于设置参数 '@EndDate' 给存储过程spSelectSystemLogsByUserID </param>	
             <returns>SqlDataReader</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectSystemLogsByUserID  ] 如下：
             <code>
             
            
            --region [dbo].[spSelectSystemLogsByUserID]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spSelectSystemLogsByUserID]
            -- Date Generated: 2005年6月8日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spSelectSystemLogsByUserID]
            	@UserID nvarchar(50),
            	@BeginDate datetime,
            	@EndDate datetime
            AS
            
            --SET NOCOUNT ON
            --SET TRANSACTION ISOLATION LEVEL READ COMMITTED
            
            SELECT	
            	[ID],
            	[SessionID],
            	[UserID],
            	[LogTime],
            	[ModuleID],
            	[LogType],
            	[LogDescription],
            	[LogIP],
            	[Platform],
            	[BrowserVersion],
            	[Language]
            FROM
            	[dbo].[SystemLog]
            WHERE
            	UserID=@UserID
            	and 
            		(LogTime >=@BeginDate  and LogTime &lt;=@EndDate)
            order by ID desc
             </code>
             结果集中的列包括:
             SqlInt64 ID, SqlString SessionID, SqlString UserID, SqlDateTime LogTime, SqlString ModuleID, SqlString LogType, SqlString LogDescription, SqlString LogIP, SqlString Platform, SqlString BrowserVersion, SqlString Language,
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDASystemLog.SelectSystemLogsDynamic(System.String,System.String,System.Int32)">
             <summary>
             此函数调用存储过程 spSelectSystemLogsDynamic stored procedure and return the datareader.
             </summary>
            <param name="whereCondition">变量 whereCondition: 用于设置参数 '@WhereCondition' 给存储过程spSelectSystemLogsDynamic </param>	
            <param name="orderByExpression">变量 orderByExpression: 用于设置参数 '@OrderByExpression' 给存储过程spSelectSystemLogsDynamic </param>	
            <param name="recordCount"></param>	
             <returns>SqlDataReader</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectSystemLogsDynamic  ] 如下：
             <code>
             
            
            --region [dbo].[spSelectSystemLogsDynamic]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spSelectSystemLogsDynamic]
            -- Date Generated: 2005年6月8日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spSelectSystemLogsDynamic]
            	@WhereCondition nvarchar(500),
            	@OrderByExpression nvarchar(250) = NULL
            	@RecordCount int
            AS
            
            --SET NOCOUNT ON
            --SET TRANSACTION ISOLATION LEVEL READ COMMITTED
            
            
            DECLARE @SQL nvarchar(3250)
            
            SET @SQL = '
            	SELECT 
            	top ' + cast(@RecordCount as nvarchar(10)) + ' 
            	[ID],
            	[SessionID],
            	[UserID],
            	[LogTime],
            	[ModuleID],
            	[LogType],
            	[LogDescription],
            	[LogIP],
            	[Platform],
            	[BrowserVersion],
            	[Language]
            FROM
            	[dbo].[SystemLog]
            WHERE
            	' + @WhereCondition
            
            IF @OrderByExpression IS NOT NULL AND LEN(@OrderByExpression) > 0
            BEGIN
            	SET @SQL = @SQL + '
            ORDER BY
            	' + @OrderByExpression
            END
            
            EXEC sp_executesql @SQL
            
            --endregion
            
            
             </code>
             结果集中的列包括:
             SqlInt64 ID, SqlString SessionID, SqlString UserID, SqlDateTime LogTime, SqlString ModuleID, SqlString LogType, SqlString LogDescription, SqlString LogIP, SqlString Platform, SqlString BrowserVersion, SqlString Language,
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDASystemLog.SelectSystemLogsDynamicPagedTotalCount(System.String)">
            <summary>
            execute the spSelectListDynamicPaged sp and get the total count of the query
            </summary>
            <param name="strWhereStatement">where condition</param>
            <returns></returns>
        </member>
        <member name="M:Business.SystemConfig.CDASystemLog.SelectSystemLogsDynamicPaged(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            execute the spSelectSystemLogsDynamicPaged sp and get the sqldatareader result
            </summary>
            <param name="strWhereStatement"></param>
            <param name="RecordCount"></param>
            <param name="intPageIndex"></param>
            <param name="intPageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Business.SystemConfig.CDASystemLog.SelectSystemLogListPaged(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            function to select one page's Department list.
            </summary>
            <param name="where">query condition</param>
            <param name="orderBy" ></param>
            <param name="ascOrDesc" ></param>
            <param name="recordCount">total Department count to fill query condition</param>
            <param name="pageIndex">required page</param>
            <param name="pageSize">record number per page</param>
            <returns>SqlDataReader with the result</returns>
        </member>
        <member name="M:Business.SystemConfig.CDASystemLog.SelectSystemLogListPagedTotalCount(System.String)">
            <summary>
            get record count
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:Business.SystemConfig.CDASystemLog.SelectSystemLogTypes(System.String)">
             <summary>
             此函数调用存储过程 spSelectSystemLogTypes 并返回包含记录的数据读取器.
             </summary>
            <param name="moduleID">变量 moduleID: 用于设置参数 '@ModuleID' 给存储过程spSelectSystemLogTypes </param>	
             <returns>SqlDataReader</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectSystemLogTypes  ] 如下：
             <code>
             --region [dbo].[spSelectSystemLogTypes]
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spSelectSystemLogTypes]
            -- Date Generated: 2005年6月8日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spSelectSystemLogTypes]
            	@ModuleID nvarchar(100) =  null
            AS
            
            	if @ModuleID is null
            	begin
            		select distinct LogType from SystemLog
            	end
            	else
            		select distinct LogType from SystemLog where ModuleID like @ModuleID+'%'
            
            --endregion
            
             </code>
             结果集中的列包括:
             SqlString LogType,
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDASystemLog.SelectSystemLogPlatforms(System.String)">
             <summary>
             此函数调用存储过程 spSelectSystemLogPlatforms 并返回包含记录的数据读取器.
             </summary>
            <param name="moduleID">变量 moduleID: 用于设置参数 '@ModuleID' 给存储过程spSelectSystemLogPlatforms </param>	
             <returns>SqlDataReader</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectSystemLogPlatforms  ] 如下：
             <code>
             
            
            
            
            
            --region [dbo].[spSelectSystemLogPlatforms]
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spSelectSystemLogPlatforms]
            -- Date Generated: 2005年6月8日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spSelectSystemLogPlatforms]
            	@ModuleID nvarchar(100) =  null
            AS
            
            	if @ModuleID is null
            	begin
            		select distinct Platform from SystemLog
            	end
            	else
            		select distinct Platform from SystemLog where ModuleID like @ModuleID+'%'
            
            --endregion
            
             </code>
             结果集中的列包括:
             SqlString Platform,
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDASystemLog.SelectSystemLogLanguages(System.String)">
             <summary>
             此函数调用存储过程 spSelectSystemLogLanguages 并返回包含记录的数据读取器.
             </summary>
            <param name="moduleID">变量 moduleID: 用于设置参数 '@ModuleID' 给存储过程spSelectSystemLogLanguages </param>	
             <returns>SqlDataReader</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectSystemLogLanguages  ] 如下：
             <code>
             
            
            
            --region [dbo].[spSelectSystemLogLanguages]
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spSelectSystemLogLanguages]
            -- Date Generated: 2005年6月8日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spSelectSystemLogLanguages]
            	@ModuleID nvarchar(100) =  null
            AS
            
            	if @ModuleID is null
            	begin
            		select distinct Language from SystemLog
            	end
            	else
            		select distinct Language from SystemLog where ModuleID like @ModuleID+'%'
            
            --endregion
            
             </code>
             结果集中的列包括:
             SqlString Language,
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDASystemLog.SelectSystemLogBrowserVersions(System.String)">
             <summary>
             此函数调用存储过程 spSelectSystemLogBrowserVersions 并返回包含记录的数据读取器.
             </summary>
            <param name="moduleID">变量 moduleID: 用于设置参数 '@ModuleID' 给存储过程spSelectSystemLogBrowserVersions </param>	
             <returns>SqlDataReader</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectSystemLogBrowserVersions  ] 如下：
             <code>
             
            
            
            --region [dbo].[spSelectSystemLogBrowserVersions]
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spSelectSystemLogBrowserVersions]
            -- Date Generated: 2005年6月8日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spSelectSystemLogBrowserVersions]
            	@ModuleID nvarchar(100) =  null
            AS
            
            	if @ModuleID is null
            	begin
            		select distinct BrowserVersion from SystemLog
            	end
            	else
            		select distinct BrowserVersion from SystemLog where ModuleID like @ModuleID+'%'
            
            --endregion
            
             </code>
             结果集中的列包括:
             SqlString BrowserVersion,
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDASystemLog.DeleteSystemLogsDynamic(System.String)">
             <summary>
             此函数调用存储过程 spDeleteSystemLogsDynamic 并返回数据库中受影响的记录数
             </summary>
            <param name="whereCondition">变量 whereCondition: 用于设置参数 '@WhereCondition' 给存储过程spDeleteSystemLogsDynamic </param>	
             <returns>受影响的记录数</returns>
             <remarks>
             存储过程源码 [ 存储过程 spDeleteSystemLogsDynamic  ] 如下：
             <code>
             CREATE PROCEDURE [dbo].[spDeleteSystemLogsDynamic]
            	@WhereCondition nvarchar(1000)
            AS
            
            --SET NOCOUNT ON
            --SET TRANSACTION ISOLATION LEVEL READ COMMITTED
            DECLARE @SQL nvarchar(3250)
            SET @SQL='
            insert into SystemLogBak
            				(
            				BakTime,
            				[LogID],
            				[SessionID],
            				[UserID],
            				[LogTime],
            				[ModuleID],
            				[LogType],
            				[LogDescription],
            				[LogIP],
            				[Platform],
            				[BrowserVersion],
            				[Language]
            				)
            				select 
            					GetDate(),
            [ID],
            [SessionID],
            [UserID],
            [LogTime],
            [ModuleID],
            [LogType],
            [LogDescription],
            [LogIP],
            [Platform],
            [BrowserVersion],
            [Language]
            FROM SystemLog
            	where 1=1 '+ @WhereCondition
            
            SET @SQL = '
            DELETE
            FROM
            	[dbo].[SystemLog]
            WHERE 1=1 
            	' + @WhereCondition
            
            EXEC sp_executesql @SQL
            
            --endregion
            
            
             </code>
             </remarks>
        </member>
        <member name="T:Business.BUSBIER">
            <summary>
            BusSex 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSBIDepartment">
            <summary>
            BUSBIDepartment 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.WareHouseManagment.BUSDirectArrivalMaterial">
            <summary>
            收料业务逻辑类 Liujun Add at 2007-6-22
            </summary>
        </member>
        <member name="M:Business.WareHouseManagment.BUSDirectArrivalMaterial.#ctor">
            <summary>
            收料业务逻辑类
            </summary>
        </member>
        <member name="M:Business.WareHouseManagment.BUSDirectArrivalMaterial.GetPOIDFilter">
            <summary>
            获得订单编号的筛选条件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.WareHouseManagment.BUSDirectArrivalMaterial.GetWHIDFilter">
            <summary>
            获得库房ID的筛选条件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.WareHouseManagment.BUSDirectArrivalMaterial.GetBINIDFilter(System.String)">
            <summary>
            根据库房获得对应库位的筛选条件
            </summary>
            <param name="sWHID">WHID</param>
            <returns></returns>
        </member>
        <member name="M:Business.WareHouseManagment.BUSDirectArrivalMaterial.CheckFactReceiveQuantityTotal(System.Data.DataTable)">
            <summary>
            校验实收数量的累加是否大于可收数量
            </summary>
            <param name="dtReceiveMaterial">物资子表</param>
            <returns></returns>
        </member>
        <member name="M:Business.WareHouseManagment.BUSDirectArrivalMaterial.CheckBusinessData(System.Data.DataTable)">
            <summary>
            校验数据逻辑
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Business.WareHouseManagment.BUSDirectArrivalMaterial.CheckChildRows(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="dt">Edit表</param>
            <returns>sErrMsg</returns>
        </member>
        <member name="M:Business.WareHouseManagment.BUSDirectArrivalMaterial.CalTotalAmount(System.Data.DataTable,System.Data.DataTable,System.Data.DataTable,System.String)">
            <summary>
            
            </summary>
            <param name="dtEdit"></param>
            <param name="dtChild"></param>
            <param name="sWHID"></param>
        </member>
        <member name="T:Business.BusPONoBidFlow">
            <summary>
            BusPONoBidFlow 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.BusPONoBidFlow.CheckBusinessData(System.Data.DataTable)">
            <summary>
            校验子表是否有数据
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Business.BusPONoBidFlow.CheckMaterial(System.Data.DataTable)">
            <summary>
            判断数量是否小于0
            </summary>
            <param name="dtMaterial"></param>
            <returns></returns>
        </member>
        <member name="T:Business.BUSTransferBin2BinEdit">
            <summary>
            BUSTransferBin2BinEdit 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.BUSTransferBin2BinEdit.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Business.BUSTransferBin2BinEdit.CalTotalAmount(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="dtEdit"></param>
            <param name="dtChild"></param>
        </member>
        <member name="M:Business.BUSTransferBin2BinEdit.CheckChildData(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="dtChild"></param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSTransferBin2BinEdit.CheckChildRows(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="dtChild"></param>
            <returns></returns>
        </member>
        <member name="T:Business.BUSITBDocumentWrite">
            <summary>
            标书撰写的业务逻辑类 Added by Liujun at 11.30
            </summary>
        </member>
        <member name="M:Business.BUSITBDocumentWrite.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Business.BUSITBDocumentWrite.CheckExist(System.String,System.Data.DataTable)">
            <summary>
            是否在SeePerson表中存在
            </summary>
            <returns></returns>
        </member>
        <member name="T:Business.BUSTenderBulletin">
            <summary>
            招标公告(浏览界面)的逻辑类
            </summary>
        </member>
        <member name="T:Business.BUSContractDatabase_Edit">
            <summary>
            BUSContractDatabase_Edit 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSMisDepApprove">
            <summary>
            BUSMisDepApprove 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.BUSMisDepApprove.CheckMRNO(System.String)">
            <summary>
            验证申请编号是否存在
            wanglijie on 2008-02-03
            </summary>
            <param name="MRNO"></param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSMisDepApprove.GetMaterialByMRID(System.String)">
            <summary>
            根据MRID得到物资子表
            </summary>
            <param name="sMRID"></param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSMisDepApprove.UpdateMaterialList(System.String,System.String)">
            <summary>
            更新物资子表状态
            </summary>
            <param name="sMRID"></param>
            <param name="sStatus"></param>
            <returns></returns>
        </member>
        <member name="T:Business.BUSMaterialCode">
            <summary>
            BUSMaterialCode 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.BUSMaterialCode.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Business.BUSCancelPreserve">
            <summary>
            BUSCancelPreserve 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.BUSCancelPreserve.CheckChildRows(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="dtChild"></param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSCancelPreserve.CheckChildData(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="dtPreserveMaterial"></param>
            <returns></returns>
        </member>
        <member name="T:Business.BUSCommEvaluation">
            <summary>
            BUSCommEvaluation 的摘要说明。
            </summary>
        </member>
        <member name="F:Business.BUSCommEvaluation.dataEntity">
            <summary>
            商务评标的数据实体类
            </summary>
        </member>
        <member name="M:Business.BUSCommEvaluation.CheckExist(System.String,System.Data.DataTable)">
            <summary>
            是否在SeePerson表中存在
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.BUSCommEvaluation.CheckCommGroupExist(System.String,System.Data.DataTable)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.BUSCommEvaluation.bHasOneTenderAtLeast(System.Data.DataTable)">
            <summary>
            至少有一个投标商中标
            </summary>
            <param name="dt_Vendors">投标商子表</param>
            <returns>是否符合条件</returns>
        </member>
        <member name="M:Business.BUSCommEvaluation.IsAllVendorGetContract(System.Data.DataTable,Business.TopisUser)">
            <summary>
            检验当前操作员所承办的SR中是否存在相同的供应商如果存在查看是否已经完成合同签订
            </summary>
            <param name="dt_Vendors"></param>
            <param name="User"></param>
            <returns></returns>
        </member>
        <member name="T:Business.BUSVendorAssociationName">
            <summary>
            BUSVendorAssociationName 的摘要说明。
            Added by QSQ 10.16
            </summary>
        </member>
        <member name="T:Business.BUSTenderBulletin_Edit">
            <summary>
            招标公告(编辑界面)的逻辑类
            </summary>
        </member>
        <member name="T:Business.BUSTCSummary">
            <summary>
            TC日程得业务逻辑类
            </summary>
        </member>
        <member name="M:Business.BUSTCSummary.CheckTCMeetingReport(System.String)">
            <summary>
            检查目标TC纪要中得TC报告是否已经全部审核
            </summary>
            <param name="strTCSummaryIDKey">TC纪要的IDKey</param>
            <returns>true:全部审核,false:存在未审核的报告</returns>
        </member>
        <member name="T:Business.BUSDocumentModel">
            <summary>
            BUSDocumentModel 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSTransferWH2WH">
            <summary>
            BUSTransferWH2WH 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSServiceRequistion">
            <summary>
            BUSServiceRequistion 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.BUSServiceRequistion.GetUserDepartmentID(System.String)">
            <param name="sCurrentUserID">登陆编号</param>
            <returns>popedomDepID</returns>
        </member>
        <member name="T:Business.BUSVendorPrejudication">
            <summary>
            BUSVendorPrejudication 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSPreserveEdit">
            <summary>
            BUSPreserveEdit 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSPreserve">
            <summary>
            BUSPreserve 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.BUSPreserve.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Business.BUSMaterialCapacity">
            <summary>
            BUSMaterialCapacity 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.BUSMaterialCapacity.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Business.TopisUser">
            <summary>
            This object represents the properties and methods of a User.
            </summary>
        </member>
        <member name="F:Business.TopisUser._userID">
            <summary>
            _userID
            </summary>
        </member>
        <member name="F:Business.TopisUser._userName">
            <summary>
            _userName
            </summary>
        </member>
        <member name="F:Business.TopisUser._userDescription">
            <summary>
            _userDescription
            </summary>
        </member>
        <member name="F:Business.TopisUser._employeeID">
            <summary>
            _employeeID
            </summary>
        </member>
        <member name="F:Business.TopisUser._positionID">
            <summary>
            _positionID
            </summary>
        </member>
        <member name="F:Business.TopisUser._positionName">
            <summary>
            _positionName
            </summary>
        </member>
        <member name="F:Business.TopisUser._departmentID">
            <summary>
            _departmentID
            </summary>
        </member>
        <member name="F:Business.TopisUser._departmentName">
            <summary>
            _departmentName
            </summary>
        </member>
        <member name="F:Business.TopisUser._warehouseids">
            <summary>
            _warehouseids 所属库房
            </summary>
        </member>
        <member name="M:Business.TopisUser.#ctor">
            <summary>
            constructor of TopisUser
            </summary>              
        </member>
        <member name="M:Business.TopisUser.#ctor(System.String)">
            <summary>
            constructor, construct a user by user id. If the user id not
            exists, throw a ApplicationException with message "User does
            not exist."
            </summary>
            <param name="vUserID">User ID</param>
            
            <remarks>
            invoke function <see cref="!:Topis.DataAccess.SystemConfig.CDAUserRoleAuthority.SelectUserInfo@string" text="SelectUserInfo"/>
            method in class DataAccess.SystemConfig.CDAUserRoleAuthority
            </remarks>                                                                                                                  
        </member>
        <member name="M:Business.TopisUser.#ctor(System.Data.SqlClient.SqlDataReader)">
            <summary>
            constructor,read user info from database reader
            </summary>
            <param name="reader">reader contains user data </param>
            
            <remarks>
            This constructor invokes <see cref="!:Topis.Components.BaseData.TopisUser.LoadFromReader@SqlDataReader" text="LoadFromReader(reader)"/>method
            
            </remarks>                                                                                                                                 
        </member>
        <member name="M:Business.TopisUser.LoadFromReader(System.Data.SqlClient.SqlDataReader)">
            <summary>
            load the user information from the database reader
            </summary>
            <param name="reader">the reader contains the user data</param>
        </member>
        <member name="M:Business.TopisUser.GetUser(System.String)">
            <summary>
            static method to get a instance of user
            </summary>
            <param name="vUserID">user id</param>
            <returns>
            TopisUser instance
            </returns>                             
        </member>
        <member name="P:Business.TopisUser.UserID">
            <summary>
            UserID
            </summary>
        </member>
        <member name="P:Business.TopisUser.UserName">
            <summary>
            UserName
            </summary>
        </member>
        <member name="P:Business.TopisUser.UserDescription">
            <summary>
            UserDescription
            </summary>
        </member>
        <member name="P:Business.TopisUser.EmployeeID">
            <summary>
            EmployeeID
            </summary>
        </member>
        <member name="P:Business.TopisUser.PositionID">
            <summary>
            PositionID
            </summary>
        </member>
        <member name="P:Business.TopisUser.DepartmentID">
            <summary>
            DepartmentID
            </summary>
        </member>
        <member name="P:Business.TopisUser.WareHouseIDs">
            <summary>
            DepartmentID
            </summary>
        </member>
        <member name="P:Business.TopisUser.PositionName">
            <summary>
            PositionName
            </summary>
        </member>
        <member name="P:Business.TopisUser.DepartmentName">
            <summary>
            DepartmentName
            </summary>
        </member>
        <member name="T:Business.TopisSystem.CDAModule">
            <summary>
            Summary description for CDAModule.
            </summary>
        </member>
        <member name="M:Business.TopisSystem.CDAModule.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Business.TopisSystem.CDAModule.SelectModulesForTree">
             <summary>
             此函数调用存储过程 spSelectModulesForTree 并返回包含记录的数据读取器.
             </summary>
             <returns>包含记录集的数据表</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectModulesForTree  ] 如下：
             <code>
             
            --region [dbo].[spSelectModulesForTree]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spSelectModulesForTree]
            -- Date Generated: 2005年6月7日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spSelectModulesForTree]
            AS
            
            --SET NOCOUNT ON
            --SET TRANSACTION ISOLATION LEVEL READ COMMITTED
            
            --select all the 
            SELECT
            	[ModuleID],
            	[ParentModuleID],
            	[SubID],
            	[IndexNo],
            	[ModuleName],
            	[ModuleUrl],
            	[IsLeafModule],
            	[IsInTree],
            	EntranceAuthority,
            	[HelpUrl],
            ModuleStatus
            FROM
            	[dbo].[Module]
            WHERE
            	IsInTree = 1
            ORDER BY
            	ParentModuleID,IndexNo
            
            --endregion
            
            
             </code>
             结果集中的列包括:
             SqlString ModuleID, SqlString ParentModuleID, SqlString SubID, SqlDecimal IndexNo, SqlString ModuleName, SqlString ModuleUrl, SqlBoolean IsLeafModule, SqlBoolean IsInTree, SqlBoolean EntranceAuthority,SqlString HelpUrl,
             </remarks>
        </member>
        <member name="M:Business.TopisSystem.CDAModule.SelectModule(System.String)">
             <summary>
             此函数调用存储过程 spSelectModule 并返回包含记录的数据读取器.
             </summary>
            <param name="moduleID">变量 moduleID: 用于设置参数 '@ModuleID' 给存储过程spSelectModule </param>	
             <returns>SqlDataReader</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectModule  ] 如下：
             <code>
             
            
            --region [dbo].[spSelectModule]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spSelectModule]
            -- Date Generated: 2005年6月7日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spSelectModule]
            	@ModuleID nvarchar(100)
            AS
            SELECT
            	[ModuleID],
            	[ParentModuleID],
            	[SubID],
            	[IndexNo],
            	[ModuleName],
            	[ModuleUrl],
            	[IsLeafModule],
            	[IsInTree],
            	EntranceAuthority,
            	[HelpUrl],
            ModuleStatus
            FROM
            	[dbo].[Module]
            WHERE
            	ModuleID=@ModuleID
            
            --endregion
            
            
             </code>
             结果集中的列包括:
             SqlString ModuleID, SqlString ParentModuleID, SqlString SubID, SqlDecimal IndexNo, SqlString ModuleName, SqlString ModuleUrl, SqlBoolean IsLeafModule, SqlBoolean IsInTree, SqlString HelpUrl,
             </remarks>
        </member>
        <member name="M:Business.TopisSystem.CDAModule.SelectModulesAll">
             <summary>
             此函数调用存储过程 spSelectModulesAll 并返回包含记录的数据读取器.
             </summary>
             <returns>SqlDataReader</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectModulesAll  ] 如下：
             <code>
             
            
            --region [dbo].[spSelectModulesAll]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spSelectModulesAll]
            -- Date Generated: 2005年6月7日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spSelectModulesAll]	
            AS
            SELECT
            	[ModuleID],
            	[ParentModuleID],
            	[SubID],
            	[IndexNo],
            	[ModuleName],
            	[ModuleUrl],
            	[IsLeafModule],
            	[IsInTree],
            	EntranceAuthority,
            	[HelpUrl],
            ModuleStatus
            FROM
            	[dbo].[Module]
            order by
            	ParentModuleID,IndexNo
            --endregion
            
            
             </code>
             结果集中的列包括:
             SqlString ModuleID, SqlString ParentModuleID, SqlString SubID, SqlDecimal IndexNo, SqlString ModuleName, SqlString ModuleUrl, SqlBoolean IsLeafModule, SqlBoolean IsInTree, SqlString HelpUrl,
             </remarks>
        </member>
        <member name="M:Business.TopisSystem.CDAModule.SelectModulesAllOrderByModuleID">
             <summary>
             此函数调用存储过程 spSelectModulesAllOrderByModuleID 并返回包含查询结果的数据集
             </summary>
             <returns>包含记录集的数据表</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectModulesAllOrderByModuleID  ] 如下：
             <code>
             
            
            --region [dbo].[spSelectModulesAllOrderByModuleID]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spSelectModulesAllOrderByModuleID]
            -- Date Generated: 2005年6月19日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spSelectModulesAllOrderByModuleID]	
            AS
            SELECT
            	[ModuleID],
            	[ParentModuleID],
            	[SubID],
            	[IndexNo],
            	[ModuleName],
            	[ModuleUrl],
            	[IsLeafModule],
            	[IsInTree],
            	EntranceAuthority,
            	[HelpUrl],
            ModuleStatus
            FROM
            	[dbo].[Module]
            order by
            	ModuleID
            --endregion
            
            
             </code>
             结果集中的列包括:
             SqlString ModuleID, SqlString ParentModuleID, SqlString SubID, SqlDecimal IndexNo, SqlString ModuleName, SqlString ModuleUrl, SqlBoolean IsLeafModule, SqlBoolean IsInTree, SqlString HelpUrl,
             </remarks>
        </member>
        <member name="M:Business.TopisSystem.CDAModule.SelectModulesAllIDAndName">
             <summary>
             此函数调用存储过程 spSelectModulesAllIDAndName 并返回包含记录的数据读取器.
             </summary>
             <returns>SqlDataReader</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectModulesAllIDAndName  ] 如下：
             <code>
             
            
            --region [dbo].[spSelectModulesAllIDAndName]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spSelectModulesAllIDAndName]
            -- Date Generated: 2005年6月7日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spSelectModulesAllIDAndName]	
            AS
            SELECT
            	[ModuleID],
            	[ModuleName]
            FROM
            	[dbo].[Module]
            order by
            	ModuleID
            --endregion
            
            
             </code>
             结果集中的列包括:
             SqlString ModuleID, SqlString ModuleName,
             </remarks>
        </member>
        <member name="T:Business.BUSServiceRequistion_Edit">
            <summary>
            BUSServiceRequistion_Edit 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.BUSServiceRequistion_Edit.CheckExist(System.String,System.Data.DataTable)">
            <summary>
            是否在SeePerson表中存在
            </summary>
            <returns></returns>
        </member>
        <member name="T:Business.BUSContractSign">
            <summary>
            BUSContractSign 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.BUSContractSign.CheckExist(System.String,System.Data.DataTable)">
            <summary>
            是否在SeePerson表中存在
            </summary>
            <returns></returns>
        </member>
        <member name="T:Business.SystemConfig.CDAPM">
            <summary>
            CDAPM 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSVenderRegister">
            <summary>
            BUSVenderRegister 的摘要说明。
            Added by QSQ 10.18
            </summary>
        </member>
        <member name="T:Business.BUSPurchaseOrder">
            <summary>
            BusPurchaseOrder 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.BUSPurchaseOrder.CheckChildRows(System.Data.DataTable)">
            <summary>
            验证表中记录行数
            </summary>
            <param name="dt">Edit表</param>
            <returns>sErrMsg</returns>
        </member>
        <member name="T:Business.BusNoFlowPOSign">
            <summary>
            BusPONoBidFlow 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.BusNoFlowPOSign.CheckBusinessData(System.Data.DataTable)">
            <summary>
            校验子表是否有数据
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Business.BusNoFlowPOSign.CheckMaterial(System.Data.DataTable)">
            <summary>
            判断数量是否小于0
            </summary>
            <param name="dtMaterial"></param>
            <returns></returns>
        </member>
        <member name="T:Business.BUSEnquiryPrice">
            <summary>
            BUSMaterialRequest 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.BUSEnquiryPrice.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Business.BUSEnquiryPrice.CheckChildRows(System.Data.DataTable)">
            <summary>
            验证借料子表中借料的数量是否大于库存数量
            </summary>
            <param name="dt">Edit表</param>
            <returns>sErrMsg</returns>
        </member>
        <member name="M:Business.BUSEnquiryPrice.CheckExist(System.String,System.Data.DataTable)">
            <summary>
            是否在SeePerson表中存在
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.BUSEnquiryPrice.GetUserDepartmentID(System.String)">
            <param name="sCurrentUserID">登陆编号</param>
            <returns>popedomDepID</returns>
        </member>
        <member name="T:Business.BUSBIDEvaluation">
            <summary>
            BUSMaterialRequest 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.BUSBIDEvaluation.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Business.BUSBIDEvaluation.CheckChildRows(System.Data.DataTable)">
            <summary>
            验证借料子表中借料的数量是否大于库存数量
            </summary>
            <param name="dtBIDEvaluation">Edit表</param>
            <returns>sErrMsg</returns>
        </member>
        <member name="M:Business.BUSBIDEvaluation.IsAwarded(System.Data.DataTable)">
            <summary>
            add by wanglijie on 2008-01-16
            提交记录审批时，需要验证Award=true
            </summary>
            <param name="dtBIDEvaluation"></param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSBIDEvaluation.CheckExist(System.String,System.Data.DataTable)">
            <summary>
            是否在SeePerson表中存在
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.BUSBIDEvaluation.GetUserDepartmentID(System.String)">
            <param name="sCurrentUserID">登陆编号</param>
            <returns>popedomDepID</returns>
        </member>
        <member name="M:Business.BUSBIDEvaluation.GetPrintData(System.String)">
            <summary>
            获取评标打印单据数据
            </summary>
            <param name="sBIDEvaluationID"></param>
            <returns></returns>
        </member>
        <member name="T:Business.BUSDocumentModelEdit">
            <summary>
            BUSDocumentModelEdit 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSTenderGroup">
            <summary>
            BUSTenderGroup 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSWareHouseEdit">
            <summary>
            BUSWareHouseEdit 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSBasicTables">
            <summary>
            BUSBasicTables 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSBasicInfoWareHouseEmployee">
            <summary>
            BUSBITables
            Modified by QSQ 10.30
            </summary>
        </member>
        <member name="M:Business.BUSBasicInfoWareHouseEmployee.getNum(System.String)">
            <summary>
            得到查询记录数目
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="T:Business.CDACommon">
            <summary>
            Summary description for CDACommon.
            </summary>
        </member>
        <member name="M:Business.CDACommon.#ctor">
            <summary>
            construnction
            do nothing
            </summary>
        </member>
        <member name="M:Business.CDACommon.SelectListPaged2(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the total record count 
            </summary>
            <param name="strFromStatement"></param>
            <param name="strWhereStatement"></param>
            <returns>the total record count</returns>
        </member>
        <member name="M:Business.CDACommon.SelectListPagedTotalCount(System.String,System.String)">
            <summary>
            Get the total record count 
            </summary>
            <param name="strFromStatement"></param>
            <param name="strWhereStatement"></param>
            <returns>the total record count</returns>
        </member>
        <member name="T:Business.CDAAttachment">
            <summary>
            Use to manage database about Attachment
            </summary>
        </member>
        <member name="M:Business.CDAAttachment.UpdateAttachment(System.String,System.String,System.Data.DataTable)">
            <summary>
            update the data in datatable to database
            </summary>
            <param name="moduleID"></param>
            <param name="infoID"></param>
            <param name="tblAttachment"></param>
            <returns></returns>
        </member>
        <member name="T:Business.BUSTransferWH2WHEdit">
            <summary>
            BUSTransferWH2WHEdit 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.BUSTransferWH2WHEdit.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Business.BUSTransferWH2WHEdit.CalTotalAmount(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="dtEdit"></param>
            <param name="dtChild"></param>
        </member>
        <member name="M:Business.BUSTransferWH2WHEdit.CheckChildData(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="dtChild"></param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSTransferWH2WHEdit.CheckChildRows(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="dtChild"></param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSTransferWH2WHEdit.GetWHIDFilter">
            <summary>
            获得库房ID的筛选条件
            </summary>
        </member>
        <member name="M:Business.BUSTransferWH2WHEdit.GetBINIDFilter(System.String)">
            <summary>
            根据库房获得对应库位的筛选条件
            </summary>
            <param name="sWHID">WHID</param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSTransferWH2WHEdit.CheckBusinessData(System.Data.DataTable,System.Collections.ArrayList)">
            <summary>
            重写CheckBusinessData(),检查 转料数量不能大于库存数量
            </summary>
            <param name="dt"></param>
            <param name="fieldsList"></param>
            <returns></returns>
        </member>
        <member name="T:Business.BUSAdjustInEdit">
            <summary>
            BUSAdjustInEdit 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.BUSAdjustInEdit.CalTotalAmount(System.Data.DataTable,System.Data.DataTable,System.Data.DataTable)">
            <summary>
            计算借料核算和本位总额
            </summary>
            <param name="dtBorrowEdit">Edit表</param>
            <param name="decTotalAmountStandard">核算总额</param>
            <param name="decTotalAmountNatural">本位总额</param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSAdjustInEdit.CheckChildRows(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="dtchild1"></param>
            <param name="dtchild2"></param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSAdjustInEdit.CheckChildData(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="dtChild"></param>
            <returns></returns>
        </member>
        <member name="T:Business.BUSTenderSend">
            <summary>
            发标的数据实体类
            </summary>
        </member>
        <member name="M:Business.BUSTenderSend.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Business.BUSTenderSend.CheckBusinessLogic_rule(System.Data.DataTable,System.Collections.ArrayList)">
            <summary>
            
            </summary>
            <param name="dt"></param>
            <param name="fieldsList"></param>
            <returns></returns>
        </member>
        <member name="T:Business.BUSTenderOpen">
            <summary>
            BUSTenderOpen Added by QSQ 12.11
            </summary>
        </member>
        <member name="M:Business.BUSTenderOpen.CheckExist(System.String,System.Data.DataTable)">
            <summary>
            是否在SeePerson表中存在
            </summary>
            <returns></returns>
        </member>
        <member name="T:Business.BUSPOSign">
            <summary>
            BUSMaterialRequest 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.BUSPOSign.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Business.BUSPOSign.CheckChildRows(System.Data.DataTable)">
            <summary>
            验证借料子表中借料的数量是否大于库存数量
            </summary>
            <param name="dt">Edit表</param>
            <returns>sErrMsg</returns>
        </member>
        <member name="M:Business.BUSPOSign.CheckExist(System.String,System.Data.DataTable)">
            <summary>
            是否在SeePerson表中存在
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.BUSPOSign.GetUserDepartmentID(System.String)">
            <param name="sCurrentUserID">登陆编号</param>
            <returns>popedomDepID</returns>
        </member>
        <member name="T:Business.BUSMRStrategy">
            <summary>
            BUSMRStrategy 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.BUSMRStrategy.HandleDataTable(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="dtMRStrategy"></param>
        </member>
        <member name="M:Business.BUSMRStrategy.GetSelectMrIDkey(System.String)">
            <summary>
            获得数据表中要被删除的策略所对应的SRIDkey
            </summary>
            <param name="sTenderID"></param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSMRStrategy.CheckBusinessData(System.Data.DataTable)">
            <summary>
            校验子表是否有数据
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSMRStrategy.CheckMaterial(System.Data.DataTable)">
            <summary>
            判断数量是否小于0
            </summary>
            <param name="dtMaterial"></param>
            <returns></returns>
        </member>
        <member name="T:Business.SystemConfig.CDAUserRoleAuthority">
            <summary>
            Summary description for CDAUserRoleAuthority.
            </summary>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.SelectUserInfosAllIDAndName">
             <summary>
             此函数调用存储过程 spSelectUserInfosAllIDAndName 并返回包含记录的数据读取器.
             </summary>
             <returns>SqlDataReader</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectUserInfosAllIDAndName  ] 如下：
             <code>
             
            
            --region [dbo].[spSelectUserInfosAllIDAndName]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spSelectUserInfosAllIDAndName]
            -- Date Generated: 2005年6月6日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spSelectUserInfosAllIDAndName]	
            AS
            
            --SET NOCOUNT ON
            --SET TRANSACTION ISOLATION LEVEL READ COMMITTED
            
            SELECT
            	[UserID],
            	[UserName]
            FROM
            	[dbo].[UserInfo]
            order by 
            	UserID
            --endregion
            
            
             </code>
             结果集中的列包括:
             SqlString UserID, SqlString UserName,
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.SelectUserInfosDynamic(System.String)">
             <summary>
             此函数调用存储过程 spSelectUserInfosDynamic 并返回包含记录的数据读取器.
             </summary>
            <param name="keyword">变量 keyword: 用于设置参数 '@Keyword' 给存储过程spSelectUserInfosDynamic </param>	
             <returns>包含记录集的数据表</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectUserInfosDynamic  ] 如下：
             <code>
             
            
            --region [dbo].[spSelectUserInfosDynamic]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spSelectUserInfosDynamic]
            -- Date Generated: 2005年6月6日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spSelectUserInfosDynamic]
            	@Keyword nvarchar(50)
            AS
            
            --SET NOCOUNT ON
            --SET TRANSACTION ISOLATION LEVEL READ COMMITTED
            
            SELECT
            	[UserID],
            	[UserName],
            	[UserDescription],
            	[Passwd],
            	[CanLogin],
            	[LastLoginTime],
            	[LastLoginIP],
            	[RelativeEmployeeID],
            	[Status]
            FROM
            	[dbo].[UserInfo]
            WHERE
            	UserID like '%'+@Keyword+'%'
            	or UserName like '%'+@Keyword+'%'
            	or UserDescription like '%'+@Keyword+'%'
            
            --endregion
            
            
             </code>
             结果集中的列包括:
             SqlString UserID, SqlString UserName, SqlString UserDescription, SqlString Passwd, SqlBoolean CanLogin, SqlDateTime LastLoginTime, SqlString LastLoginIP, SqlString RelativeEmployeeID, SqlByte Status,
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.SelectUserInfoListPaged(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            function to select one page's User list.
            </summary>
            <param name="where">query condition</param>
            <param name="orderBy" ></param>
            <param name="ascOrDesc" ></param>
            <param name="recordCount">total Department count to fill query condition</param>
            <param name="pageIndex">required page</param>
            <param name="pageSize">record number per page</param>
            <returns>SqlDataReader with the result</returns>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.SelectUserInfoListPagedTotalCount(System.String)">
            <summary>
            get record count
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.SelectUserInfo(System.String)">
             <summary>
             此函数调用存储过程 spSelectUserInfo 并返回包含记录的数据读取器.
             </summary>
            <param name="userID">变量 userID: 用于设置参数 '@UserID' 给存储过程spSelectUserInfo </param>	
             <returns>SqlDataReader</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectUserInfo  ] 如下：
             <code>
             
            
            --region [dbo].[spSelectUserInfo]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spSelectUserInfo]
            -- Date Generated: 2005年6月6日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spSelectUserInfo]
            	@UserID nvarchar(32)
            AS
            
            --SET NOCOUNT ON
            --SET TRANSACTION ISOLATION LEVEL READ COMMITTED
            
            
            SELECT
            	[UserID],
            	[UserName],
            	[UserDescription],
            	[Passwd],
            	[CanLogin],
            	[LastLoginTime],
            	[LastLoginIP],
            	[RelativeEmployeeID],
            	[Status]
            FROM
            	[dbo].[UserInfo]
            WHERE
            	[UserID] = @UserID
            
            --endregion
            
            
             </code>
             结果集中的列包括:
             SqlString UserID, SqlString UserName, SqlString UserDescription, SqlString Passwd, SqlBoolean CanLogin, SqlDateTime LastLoginTime, SqlString LastLoginIP, SqlString RelativeEmployeeID, SqlByte Status,
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.GetUserName(System.String)">
            <summary>
            get the userName
            </summary>
            <param name="userID"></param>
            <returns></returns>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.CheckUserValid(System.String)">
            <summary>
            get the userName
            </summary>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.CheckUserExists(System.String)">
            <summary>
            check wether the userID is a valid user id
            </summary>
            <param name="userID"></param>
            <returns></returns>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.CheckUserPassword(System.String,System.String)">
             <summary>
             此函数调用存储过程 spCheckUserPassword stored procedure .
             </summary>
            <param name="userID">变量 userID: 用于设置参数 '@UserID' 给存储过程spCheckUserPassword </param>	
            <param name="passwd">变量 passwd: 用于设置参数 '@Passwd' 给存储过程spCheckUserPassword </param>	
             <returns>bool</returns>
             <remarks>
             存储过程源码 [ 存储过程 spCheckUserPassword  ] 如下：
             <code>
             
            
            
            --region [dbo].[spCheckUserPassword]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spCheckUserPassword]
            -- Date Generated: 2005年6月6日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spCheckUserPassword]
            	@UserID nvarchar(32),
            	@Passwd nvarchar(50)
            AS
            
            --SET NOCOUNT ON
            --SET TRANSACTION ISOLATION LEVEL READ COMMITTED
            	if exists (
            		select * from UserInfo where UserID=@UserID and Passwd=@Passwd and CanLogin=1
            	)
            	return 1
            	else return 0
            
            --endregion
            
            
             </code>
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.InsertUserInfo(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Byte,System.String)">
             <summary>
             此函数调用存储过程 spInsertUserInfo 并返回数据库中受影响的记录数
             </summary>
            <param name="userID">变量 userID: 用于设置参数 '@UserID' 给存储过程spInsertUserInfo </param>	
            <param name="userName">变量 userName: 用于设置参数 '@UserName' 给存储过程spInsertUserInfo </param>	
            <param name="userDescription">变量 userDescription: 用于设置参数 '@UserDescription' 给存储过程spInsertUserInfo </param>	
            <param name="passwd">变量 passwd: 用于设置参数 '@Passwd' 给存储过程spInsertUserInfo </param>	
            <param name="canLogin">变量 canLogin: 用于设置参数 '@CanLogin' 给存储过程spInsertUserInfo </param>	
            <param name="relativeEmployeeID">变量 relativeEmployeeID: 用于设置参数 '@RelativeEmployeeID' 给存储过程spInsertUserInfo </param>	
            <param name="status">变量 status: 用于设置参数 '@Status' 给存储过程spInsertUserInfo </param>	
             <returns>受影响的记录数</returns>
             <remarks>
             存储过程源码 [ 存储过程 spInsertUserInfo  ] 如下：
             <code>
             
            
            
            --region [dbo].[spInsertUserInfo]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spInsertUserInfo]
            -- Date Generated: 2005年6月6日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spInsertUserInfo]
            	@UserID nvarchar(32),
            	@UserName nvarchar(64),
            	@UserDescription nvarchar(1024),
            	@Passwd nvarchar(50),
            	@CanLogin bit,
            	@RelativeEmployeeID nvarchar(32),
            	@Status tinyint
            AS
            
            --SET NOCOUNT ON
            
            INSERT INTO [dbo].[UserInfo] (
            	[UserID],
            	[UserName],
            	[UserDescription],
            	[Passwd],
            	[CanLogin],
            	[LastLoginTime],
            	[LastLoginIP],
            	[RelativeEmployeeID],
            	[Status]
            ) VALUES (
            	@UserID,
            	@UserName,
            	@UserDescription,
            	@Passwd,
            	@CanLogin,
            	null,
            	null,
            	@RelativeEmployeeID,
            	@Status
            )
            
            --endregion
            
            
             </code>
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.UpdateUserInfo(System.String,System.String,System.String,System.Boolean,System.String,System.Byte,System.String)">
             <summary>
             此函数调用存储过程 spUpdateUserInfo 并返回数据库中受影响的记录数
             </summary>
            <param name="userID">变量 userID: 用于设置参数 '@UserID' 给存储过程spUpdateUserInfo </param>	
            <param name="userName">变量 userName: 用于设置参数 '@UserName' 给存储过程spUpdateUserInfo </param>	
            <param name="userDescription">变量 userDescription: 用于设置参数 '@UserDescription' 给存储过程spUpdateUserInfo </param>	
            <param name="canLogin">变量 canLogin: 用于设置参数 '@CanLogin' 给存储过程spUpdateUserInfo </param>	
            <param name="relativeEmployeeID">变量 relativeEmployeeID: 用于设置参数 '@RelativeEmployeeID' 给存储过程spUpdateUserInfo </param>	
            <param name="status">变量 status: 用于设置参数 '@Status' 给存储过程spUpdateUserInfo </param>	
             <returns>受影响的记录数</returns>
             <remarks>
             存储过程源码 [ 存储过程 spUpdateUserInfo  ] 如下：
             <code>
             
            --region [dbo].[spUpdateUserInfo]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spUpdateUserInfo]
            -- Date Generated: 2005年6月6日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spUpdateUserInfo]
            	@UserID nvarchar(32),
            	@UserName nvarchar(64),
            	@UserDescription nvarchar(1024),
            	@CanLogin bit,
            	@RelativeEmployeeID nvarchar(32),
            	@Status tinyint
            AS
            
            --SET NOCOUNT ON
            
            UPDATE [dbo].[UserInfo] SET
            	[UserName] = @UserName,
            	[UserDescription] = @UserDescription,
            	[CanLogin] = @CanLogin,	
            	[RelativeEmployeeID] = @RelativeEmployeeID,
            	[Status] = @Status
            WHERE
            	[UserID] = @UserID
            
            --endregion
            
            
             </code>
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.UpdateUserPasswd(System.String,System.String)">
             <summary>
             此函数调用存储过程 spUpdateUserPasswd 并返回数据库中受影响的记录数
             </summary>
            <param name="userID">变量 userID: 用于设置参数 '@UserID' 给存储过程spUpdateUserPasswd </param>	
            <param name="passwd">变量 passwd: 用于设置参数 '@Passwd' 给存储过程spUpdateUserPasswd </param>	
             <returns>受影响的记录数</returns>
             <remarks>
             存储过程源码 [ 存储过程 spUpdateUserPasswd  ] 如下：
             <code>
             
            --region [dbo].[spUpdateUserPasswd]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spUpdateUserPasswd]
            -- Date Generated: 2005年6月6日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spUpdateUserPasswd]
            	@UserID nvarchar(32),
            	@Passwd nvarchar(50)
            	
            AS
            
            --SET NOCOUNT ON
            
            UPDATE [dbo].[UserInfo] SET
            	Passwd = @Passwd
            WHERE
            	[UserID] = @UserID
            
            --endregion
            
            
             </code>
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.UpdateUserLoginInfo(System.String,System.DateTime,System.String)">
             <summary>
             此函数调用存储过程 spUpdateUserLoginInfo 并返回数据库中受影响的记录数
             </summary>
            <param name="userID">变量 userID: 用于设置参数 '@UserID' 给存储过程spUpdateUserLoginInfo </param>	
            <param name="lastLoginTime">变量 lastLoginTime: 用于设置参数 '@LastLoginTime' 给存储过程spUpdateUserLoginInfo </param>	
            <param name="lastLoginIP">变量 lastLoginIP: 用于设置参数 '@LastLoginIP' 给存储过程spUpdateUserLoginInfo </param>	
             <returns>受影响的记录数</returns>
             <remarks>
             存储过程源码 [ 存储过程 spUpdateUserLoginInfo  ] 如下：
             <code>
             
            
            --region [dbo].[spUpdateUserLoginInfo]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spUpdateUserLoginInfo]
            -- Date Generated: 2005年6月6日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spUpdateUserLoginInfo]
            	@UserID nvarchar(32),
            	@LastLoginTime datetime,
            	@LastLoginIP nvarchar(50)
            AS
            
            --SET NOCOUNT ON
            
            UPDATE [dbo].[UserInfo] SET
            	LastLoginTime=@LastLoginTime,
            	LastLoginIP=@LastLoginIP
            WHERE
            	[UserID] = @UserID
            
            --endregion
            
            
             </code>
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.DeleteUserAllRole(System.String)">
             <summary>
             此函数调用存储过程 spDeleteUserInfo 并返回数据库中受影响的记录数
             </summary>
            <param name="userID">变量 userID: 用于设置参数 '@UserID' 给存储过程spDeleteUserInfo </param>	
             <returns>受影响的记录数</returns>
             <remarks>
             存储过程源码 [ 存储过程 spDeleteUserInfo  ] 如下：
             <code>
             
            --region [dbo].[spDeleteUserInfo]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spDeleteUserInfo]
            -- Date Generated: 2005年6月6日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spDeleteUserInfo]
            	@UserID nvarchar(32)
            AS
            
            --SET NOCOUNT ON
            
            DELETE FROM [dbo].[UserInfo]
            WHERE
            	[UserID] = @UserID
            
            --endregion
            
            
             </code>
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.SelectRolesIDAndName">
             <summary>
             此函数调用存储过程 spSelectRolesIDAndName 并返回包含记录的数据读取器.
             </summary>
             <returns>SqlDataReader</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectRolesIDAndName  ] 如下：
             <code>
             
            --region [dbo].[spSelectRolesIDAndName]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spSelectRolesIDAndName]
            -- Date Generated: 2005年6月6日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spSelectRolesIDAndName]
            AS
            
            --SET NOCOUNT ON
            --SET TRANSACTION ISOLATION LEVEL READ COMMITTED
            
            
            SELECT
            	[RoleID],
            	[RoleName]
            FROM
            	[dbo].[Role]
            ORDER BY
            	RoleID
            
            --endregion
            
            
             </code>
             结果集中的列包括:
             SqlInt32 RoleID, SqlString RoleName,
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.SelectRolesDynamic(System.String)">
             <summary>
             此函数调用存储过程 spSelectRolesDynamic 并返回包含记录的数据读取器.
             </summary>
            <param name="keyword">变量 keyword: 用于设置参数 '@Keyword' 给存储过程spSelectRolesDynamic </param>	
             <returns>SqlDataReader</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectRolesDynamic  ] 如下：
             <code>
             
            --region [dbo].[spSelectRolesDynamic]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spSelectRolesDynamic]
            -- Date Generated: 2005年6月6日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spSelectRolesDynamic]
            	@Keyword nvarchar(50)
            AS
            
            --SET NOCOUNT ON
            --SET TRANSACTION ISOLATION LEVEL READ COMMITTED
            
            
            SELECT
            	[RoleID],
            	[RoleName],
            	[RoleDesc]
            FROM
            	[dbo].[Role]
            WHERE
            	RoleName like '%'+@Keyword+'%'
            	or RoleDesc like '%'+@Keyword+'%'
            ORDER BY
            	RoleID
            
            --endregion
            
            
             </code>
             结果集中的列包括:
             SqlInt32 RoleID, SqlString RoleName, SqlString RoleDesc,
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.SelectRoleListPaged(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            function to select one page's Role list.
            </summary>
            <param name="where">query condition</param>
            <param name="orderBy" ></param>
            <param name="ascOrDesc" ></param>
            <param name="recordCount">total Department count to fill query condition</param>
            <param name="pageIndex">required page</param>
            <param name="pageSize">record number per page</param>
            <returns>SqlDataReader with the result</returns>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.SelectRoleListPagedTotalCount(System.String)">
            <summary>
            get record count
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.SelectRole(System.Int32)">
             <summary>
             此函数调用存储过程 spSelectRole 并返回包含记录的数据读取器.
             </summary>
            <param name="roleID">变量 roleID: 用于设置参数 '@RoleID' 给存储过程spSelectRole </param>	
             <returns>SqlDataReader</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectRole  ] 如下：
             <code>
             
            --region [dbo].[spSelectRole]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spSelectRole]
            -- Date Generated: 2005年6月6日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spSelectRole]
            	@RoleID int
            AS
            
            --SET NOCOUNT ON
            --SET TRANSACTION ISOLATION LEVEL READ COMMITTED
            
            
            SELECT
            	[RoleID],
            	[RoleName],
            	[RoleDesc]
            FROM
            	[dbo].[Role]
            WHERE
            	[RoleID] = @RoleID
            
            --endregion
            
            
             </code>
             结果集中的列包括:
             SqlInt32 RoleID, SqlString RoleName, SqlString RoleDesc,
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.InsertRole(System.String,System.String,System.Int32@)">
             <summary>
             此函数调用存储过程 spInsertRole 并返回数据库中受影响的记录数
             </summary>
            <param name="roleName">变量 roleName: 用于设置参数 '@RoleName' 给存储过程spInsertRole </param>	
            <param name="roleDesc">变量 roleDesc: 用于设置参数 '@RoleDesc' 给存储过程spInsertRole </param>	
            <param name="roleID">变量 roleID: get Parameter '@RoleID' 给存储过程spInsertRole </param>	
             <returns>受影响的记录数</returns>
             <remarks>
             存储过程源码 [ 存储过程 spInsertRole  ] 如下：
             <code>
             
            --region [dbo].[spInsertRole]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spInsertRole]
            -- Date Generated: 2005年6月6日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spInsertRole]
            	@RoleName nvarchar(100),
            	@RoleDesc nvarchar(500),
            	@RoleID int OUTPUT
            AS
            
            --SET NOCOUNT ON
            
            INSERT INTO [dbo].[Role] (
            	[RoleName],
            	[RoleDesc]
            ) VALUES (
            	@RoleName,
            	@RoleDesc
            )
            
            SET @RoleID = SCOPE_IDENTITY()
            
            --endregion
            
            
             </code>
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.UpdateRole(System.Int32,System.String,System.String)">
             <summary>
             此函数调用存储过程 spUpdateRole 并返回数据库中受影响的记录数
             </summary>
            <param name="roleID">变量 roleID: 用于设置参数 '@RoleID' 给存储过程spUpdateRole </param>	
            <param name="roleName">变量 roleName: 用于设置参数 '@RoleName' 给存储过程spUpdateRole </param>	
            <param name="roleDesc">变量 roleDesc: 用于设置参数 '@RoleDesc' 给存储过程spUpdateRole </param>	
             <returns>受影响的记录数</returns>
             <remarks>
             存储过程源码 [ 存储过程 spUpdateRole  ] 如下：
             <code>
             
            --region [dbo].[spUpdateRole]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spUpdateRole]
            -- Date Generated: 2005年6月6日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spUpdateRole]
            	@RoleID int,
            	@RoleName nvarchar(100),
            	@RoleDesc nvarchar(500)
            AS
            
            --SET NOCOUNT ON
            
            UPDATE [dbo].[Role] SET
            	[RoleName] = @RoleName,
            	[RoleDesc] = @RoleDesc
            WHERE
            	[RoleID] = @RoleID
            
            --endregion
            
            
             </code>
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.DeleteRole(System.Int32)">
             <summary>
             此函数调用存储过程 spDeleteRole 并返回数据库中受影响的记录数
             </summary>
            <param name="roleID">变量 roleID: 用于设置参数 '@RoleID' 给存储过程spDeleteRole </param>	
             <returns>受影响的记录数</returns>
             <remarks>
             存储过程源码 [ 存储过程 spDeleteRole  ] 如下：
             <code>
             
            --region [dbo].[spDeleteRole]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spDeleteRole]
            -- Date Generated: 2005年6月6日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spDeleteRole]
            	@RoleID int
            AS
            
            --SET NOCOUNT ON
            
            DELETE FROM [dbo].[Role]
            WHERE
            	[RoleID] = @RoleID
            
            --endregion
            
            
             </code>
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.SelectRolesByUserID(System.String)">
             <summary>
             此函数调用存储过程 spSelectRolesByUserID 并返回包含记录的数据读取器.
             </summary>
            <param name="userID">变量 userID: 用于设置参数 '@UserID' 给存储过程spSelectRolesByUserID </param>	
             <returns>SqlDataReader</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectRolesByUserID  ] 如下：
             <code>
             
            
            
            
            --region [dbo].[spSelectRolesByUserID]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spSelectRolesByUserID]
            -- Date Generated: 2005年6月6日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spSelectRolesByUserID]
            	@UserID nvarchar(32)=null
            AS
            
            --SET NOCOUNT ON
            --SET TRANSACTION ISOLATION LEVEL READ COMMITTED
            
            if @UserID is not null
            begin
            	
            	SELECT
            		Role.[RoleID],
            		Role.[RoleName],
            		case when UserRole.UserID is null then cast(0 as bit)
            		else cast(1 as bit) end as HasRole
            	FROM
            		[dbo].[Role]
            	left outer join
            		UserRole
            	on
            		Role.RoleID = UserRole.RoleID
            		and UserRole.UserID=@UserID
            end
            else
            begin
            	select  
            		Role.RoleID,
            		Role.RoleName,
            		cast(0 as bit) as HasRole
            	from
            		Role	
            end
            --endregion
            
            
             </code>
             结果集中的列包括:
             SqlInt32 RoleID, SqlString RoleName, SqlBoolean HasRole,
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.InsertUserRole(System.String,System.Int32)">
             <summary>
             此函数调用存储过程 spInsertUserRole 并返回数据库中受影响的记录数
             </summary>
            <param name="userID">变量 userID: 用于设置参数 '@UserID' 给存储过程spInsertUserRole </param>	
            <param name="roleID">变量 roleID: 用于设置参数 '@RoleID' 给存储过程spInsertUserRole </param>	
             <returns>受影响的记录数</returns>
             <remarks>
             存储过程源码 [ 存储过程 spInsertUserRole  ] 如下：
             <code>
             
            
            -----------userrole
            
            
            --region [dbo].[spInsertUserRole]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spInsertUserRole]
            -- Date Generated: 2005年6月8日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spInsertUserRole]
            	@UserID nvarchar(32),
            	@RoleID int
            AS
            
            --SET NOCOUNT ON
            
            INSERT INTO [dbo].[UserRole] (
            	[UserID],
            	[RoleID]
            ) VALUES (
            	@UserID,
            	@RoleID
            )
            
            --endregion
            
            
             </code>
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.DeleteUserRole(System.String,System.Int32)">
             <summary>
             此函数调用存储过程 spDeleteUserRole 并返回数据库中受影响的记录数
             </summary>
            <param name="userID">变量 userID: 用于设置参数 '@UserID' 给存储过程spDeleteUserRole </param>	
            <param name="roleID">变量 roleID: 用于设置参数 '@RoleID' 给存储过程spDeleteUserRole </param>	
             <returns>受影响的记录数</returns>
             <remarks>
             存储过程源码 [ 存储过程 spDeleteUserRole  ] 如下：
             <code>
             
            --region [dbo].[spDeleteUserRole]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spDeleteUserRole]
            -- Date Generated: 2005年6月8日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spDeleteUserRole]
            	@UserID nvarchar(32),
            	@RoleID int
            AS
            
            --SET NOCOUNT ON
            
            DELETE FROM [dbo].[UserRole]
            WHERE
            	[UserID] = @UserID
            	AND [RoleID] = @RoleID
            
            --endregion
            
            
             </code>
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.SelectAuthoritiesAll">
             <summary>
             此函数调用存储过程 spSelectAuthoritiesAll 并返回包含记录的数据读取器.
             </summary>
             <returns>SqlDataReader</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectAuthoritiesAll  ] 如下：
             <code>
             
            --region [dbo].[spSelectAuthoritiesAll]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spSelectAuthoritiesAll]
            -- Date Generated: 2005年6月7日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spSelectAuthoritiesAll]
            AS
            
            --SET NOCOUNT ON
            --SET TRANSACTION ISOLATION LEVEL READ COMMITTED
            
            
            SELECT
            	[AuthorityID],
            	[ModuleID],
            	[AuthorityType],
            	[AuthorityDescription]
            FROM
            	[dbo].[Authority]
            ORDER BY
            	AuthorityID
            
            --endregion
            
            
             </code>
             结果集中的列包括:
             SqlString AuthorityID, SqlString ModuleID, SqlString AuthorityType, SqlString AuthorityDescription,
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.SelectAuthoritiesByModuleID(System.String)">
             <summary>
             此函数调用存储过程 spSelectAuthoritiesByModuleID 并返回包含记录的数据读取器.
             </summary>
            <param name="moduleID">变量 moduleID: 用于设置参数 '@ModuleID' 给存储过程spSelectAuthoritiesByModuleID </param>	
             <returns>SqlDataReader</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectAuthoritiesByModuleID  ] 如下：
             <code>
             
            --region [dbo].[spSelectAuthoritiesByModuleID]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spSelectAuthoritiesByModuleID]
            -- Date Generated: 2005年6月7日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spSelectAuthoritiesByModuleID]
            	@ModuleID nvarchar(100)
            AS
            
            --SET NOCOUNT ON
            --SET TRANSACTION ISOLATION LEVEL READ COMMITTED
            
            
            SELECT
            	[AuthorityID],
            	[ModuleID],
            	[AuthorityType],
            	[AuthorityDescription]
            FROM
            	[dbo].[Authority]
            WHERE
            	[ModuleID] = @ModuleID
            ORDER BY
            	AuthorityID
            
            --endregion
            
            
             </code>
             结果集中的列包括:
             SqlString AuthorityID, SqlString ModuleID, SqlString AuthorityType, SqlString AuthorityDescription,
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.SelectAuthoritiesAndModulesAll">
             <summary>
             此函数调用存储过程 spSelectAuthoritiesAndModulesAll 并返回包含记录的数据读取器.
             </summary>
             <returns>DataSet</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectAuthoritiesAndModulesAll  ] 如下：
             <code>
             
            
            
            --region [dbo].[spSelectAuthoritiesAndModulesAll]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spSelectAuthoritiesAndModulesAll]
            -- Date Generated: 2005年6月7日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spSelectAuthoritiesAndModulesAll]	
            AS
            
            --SET NOCOUNT ON
            --SET TRANSACTION ISOLATION LEVEL READ COMMITTED
            
            --select all the parentModuleID
            select distinct 
            	ParentModuleID
            from
            	Module
            where
            	ModuleID in 
            	(
            		select ModuleID from Authority
            	)	
            
            --get all the modules
            SELECT 
            	ParentModuleID,ModuleID,SubID
            FROM
            	Module
            where
            	ModuleID in 
            	(
            		select ModuleID from Authority
            	)	
            ORDER BY
            	ParentModuleID,IndexNo
            
            
            --get all the authorities
            SELECT
            	[AuthorityID],
            	[ModuleID],
            	[AuthorityType],
            	[AuthorityDescription]
            FROM
            	[dbo].[Authority]
            ORDER BY
            	AuthorityID
            
            --endregion
            
            
             </code>
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.SelectRoleAuthoritiesAndModulesAll(System.Int32)">
             <summary>
             此函数调用存储过程 spSelectRoleAuthoritiesAndModulesAll 并返回包含记录的数据读取器.
             </summary>
            <param name="roleID">变量 roleID: 用于设置参数 '@RoleID' 给存储过程spSelectRoleAuthoritiesAndModulesAll </param>	
             <returns>DataSet</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectRoleAuthoritiesAndModulesAll  ] 如下：
             <code>
             
            
            
            
            --region [dbo].[spSelectRoleAuthoritiesAndModulesAll]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spSelectRoleAuthoritiesAndModulesAll]
            -- Date Generated: 2005年6月7日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spSelectRoleAuthoritiesAndModulesAll]	
            	@RoleID int = null
            AS
            
            --SET NOCOUNT ON
            --SET TRANSACTION ISOLATION LEVEL READ COMMITTED
            
            --select all the parentModuleID
            select distinct 
            	ParentModuleID
            from
            	Module
            where
            	ModuleID in 
            	(
            		select ModuleID from Authority
            	)	
            
            
            --get all the modules
            SELECT 
            	ParentModuleID,ModuleID,SubID
            FROM
            	Module
            where
            	ModuleID in 
            	(
            		select ModuleID from Authority
            	)	
            ORDER BY
            	ParentModuleID,IndexNo
            
            
            if @RoleID is null
            begin
            
            	--get all the authorities
            	SELECT
            		[AuthorityID],
            		[ModuleID],
            		[AuthorityType],
            		cast(0 as bit) as IsInRole
            	FROM
            		[dbo].[Authority]
            	ORDER BY
            		AuthorityID
            end 
            else
            begin
            	--get all the authorities
            	SELECT
            		Authority.[AuthorityID],
            		Authority.[ModuleID],
            		Authority.[AuthorityType],
            		case 
            			when RoleID is null then cast(0 as bit)
            			else cast(1 as bit)
            		end as IsInRole
            	FROM
            		[dbo].[Authority]
            	LEFT OUTER JOIN
            		RoleAuthority
            	on
            		Authority.AuthorityID = RoleAuthority.AuthorityID
            		and RoleAuthority.RoleID = @RoleID
            end
            --endregion
            
            
             </code>
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.SelectAuthoritiesByRoleID(System.Int32)">
             <summary>
             此函数调用存储过程 spSelectAuthoritiesByRoleID 并返回包含记录的数据读取器.
             </summary>
            <param name="roleID">变量 roleID: 用于设置参数 '@RoleID' 给存储过程spSelectAuthoritiesByRoleID </param>	
             <returns>SqlDataReader</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectAuthoritiesByRoleID  ] 如下：
             <code>
             
            
            
            
            --region [dbo].[spSelectAuthoritiesByRoleID]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spSelectAuthoritiesByRoleID]
            -- Date Generated: 2005年6月7日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spSelectAuthoritiesByRoleID]	
            	@RoleID int = null
            AS
            
            --SET NOCOUNT ON
            --SET TRANSACTION ISOLATION LEVEL READ COMMITTED
            
            if @RoleID is null
            begin
            
            	--get all the authorities
            	SELECT
            		[AuthorityID],
            		[ModuleID],
            		[AuthorityType],
            		cast(0 as bit) as IsInRole
            	FROM
            		[dbo].[Authority]
            	ORDER BY
            		AuthorityID
            end 
            else
            begin
            	--get all the authorities
            	SELECT
            		Authority.[AuthorityID],
            		Authority.[ModuleID],
            		Authority.[AuthorityType],
            		case 
            			when RoleID is null then cast(0 as bit)
            			else cast(1 as bit)
            		end as IsInRole
            	FROM
            		[dbo].[Authority]
            	LEFT OUTER JOIN
            		RoleAuthority
            	on
            		Authority.AuthorityID = RoleAuthority.AuthorityID
            		and RoleAuthority.RoleID = @RoleID
            end
            --endregion
            
            
             </code>
             结果集中的列包括:
             SqlString AuthorityID, SqlString ModuleID, SqlString AuthorityType, SqlBoolean IsInRole,
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.InsertRoleAuthority(System.Int32,System.String)">
             <summary>
             此函数调用存储过程 spInsertRoleAuthority 并返回数据库中受影响的记录数
             </summary>
            <param name="roleID">变量 roleID: 用于设置参数 '@RoleID' 给存储过程spInsertRoleAuthority </param>	
            <param name="authorityID">变量 authorityID: 用于设置参数 '@AuthorityID' 给存储过程spInsertRoleAuthority </param>	
             <returns>受影响的记录数</returns>
             <remarks>
             存储过程源码 [ 存储过程 spInsertRoleAuthority  ] 如下：
             <code>
             
            
            
            --region [dbo].[spInsertRoleAuthority]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spInsertRoleAuthority]
            -- Date Generated: 2005年6月7日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spInsertRoleAuthority]
            	@RoleID int,
            	@AuthorityID nvarchar(150)
            AS
            
            --SET NOCOUNT ON
            
            INSERT INTO [dbo].[RoleAuthority] (
            	[RoleID],
            	[AuthorityID]
            ) VALUES (
            	@RoleID,
            	@AuthorityID
            )
            
            --endregion
            
            
             </code>
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.DeleteRoleAuthority(System.Int32,System.String)">
             <summary>
             此函数调用存储过程 spDeleteRoleAuthority 并返回数据库中受影响的记录数
             </summary>
            <param name="roleID">变量 roleID: 用于设置参数 '@RoleID' 给存储过程spDeleteRoleAuthority </param>	
            <param name="authorityID">变量 authorityID: 用于设置参数 '@AuthorityID' 给存储过程spDeleteRoleAuthority </param>	
             <returns>受影响的记录数</returns>
             <remarks>
             存储过程源码 [ 存储过程 spDeleteRoleAuthority  ] 如下：
             <code>
             
            
            --region [dbo].[spDeleteRoleAuthority]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spDeleteRoleAuthority]
            -- Date Generated: 2005年6月7日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spDeleteRoleAuthority]
            	@RoleID int,
            	@AuthorityID nvarchar(150)
            AS
            
            --SET NOCOUNT ON
            
            DELETE FROM [dbo].[RoleAuthority]
            WHERE
            	[RoleID] = @RoleID
            	AND [AuthorityID] = @AuthorityID
            
            --endregion
            
             </code>
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.DeleteRoleAuthoritiesByRoleID(System.Int32)">
             <summary>
             此函数调用存储过程 spDeleteRoleAuthoritiesByRoleID 并返回数据库中受影响的记录数
             </summary>
            <param name="roleID">变量 roleID: 用于设置参数 '@RoleID' 给存储过程spDeleteRoleAuthoritiesByRoleID </param>	
             <returns>受影响的记录数</returns>
             <remarks>
             存储过程源码 [ 存储过程 spDeleteRoleAuthoritiesByRoleID  ] 如下：
             <code>
             
            --region [dbo].[spDeleteRoleAuthoritiesByRoleID]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spDeleteRoleAuthoritiesByRoleID]
            -- Date Generated: 2005年6月7日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spDeleteRoleAuthoritiesByRoleID]
            	@RoleID int
            AS
            
            --SET NOCOUNT ON
            
            DELETE FROM [dbo].[RoleAuthority]
            WHERE
            	[RoleID] = @RoleID
            
            
             </code>
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.SelectContractAuthoritiesTableByUserID(System.String)">
             <summary>
             此函数调用存储过程 SelectContractAuthoritiesTableByUserID 并返回包含查询结果的数据集
             </summary>
            <param name="userID">变量 userID: 用于设置参数 '@UserID' 给存储过程SelectContractAuthoritiesTableByUserID </param>	
             <returns>包含记录集的数据表</returns>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.SelectContractAuthoritiesReaderByUserID(System.String)">
             <summary>
             此函数调用存储过程 spSelectContractAuthorityByUserID 并返回包含查询结果的数据集
             </summary>
            <param name="userID">变量 userID: 用于设置参数 '@UserID' 给存储过程spSelectContractAuthorityByUserID </param>	
             <returns>包含记录集的数据表</returns>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.CheckUserAuthority(System.String,System.String)">
             <summary>
             此函数调用存储过程 spCheckUserAuthority stored procedure .
             </summary>
            <param name="userID">变量 userID: 用于设置参数 '@UserID' 给存储过程spCheckUserAuthority </param>	
            <param name="authorityID">变量 authorityID: 用于设置参数 '@AuthorityID' 给存储过程spCheckUserAuthority </param>	
             <returns>bool</returns>
             <remarks>
             存储过程源码 [ 存储过程 spCheckUserAuthority  ] 如下：
             <code>
             
            
            --region [dbo].[spCheckUserAuthority]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spCheckUserAuthority]
            -- Date Generated: 2005年6月6日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spCheckUserAuthority]
            	@UserID nvarchar(32),
            	@AuthorityID nvarchar(150)
            AS
            
            --SET NOCOUNT ON
            --SET TRANSACTION ISOLATION LEVEL READ COMMITTED
            	if exists (
            		select * from RoleAuthority
            		where AuthorityID=@AuthorityID
            		and RoleID in
            		(--all the role of user
            			select RoleID from UserRole
            			where UserID=@UserID
            		)
            	)
            	return 1
            	else return 0
            
            --endregion
            
            
             </code>
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.SelectUsersByAuthorityID(System.String)">
             <summary>
             此函数调用存储过程 spSelectUsersByAuthorityID 并返回包含记录的数据读取器.
             </summary>
            <param name="authorityID">变量 authorityID: 用于设置参数 '@AuthorityID' 给存储过程spSelectUsersByAuthorityID </param>	
             <returns>SqlDataReader</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectUsersByAuthorityID  ] 如下：
             <code>
             
            
            --region [dbo].[spSelectUsersByAuthorityID]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spSelectUsersByAuthorityID]
            -- Date Generated: 2005年6月6日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spSelectUsersByAuthorityID]
            	@AuthorityID nvarchar(150)
            AS
            
            --SET NOCOUNT ON
            --SET TRANSACTION ISOLATION LEVEL READ COMMITTED
            
            SELECT
            	[UserID],
            	[UserName],
            	[CanLogin],
            	[Status]
            FROM
            	[dbo].[UserInfo]
            WHERE
            	UserID in
            	(
            		select UserID from UserRole
            		where RoleID in
            		(
            			select RoleID from RoleAuthority where AuthorityID=@AuthorityID
            		)
            	)
            
            --endregion
            
            
             </code>
             结果集中的列包括:
             SqlString UserID, SqlString UserName, SqlBoolean CanLogin, SqlByte Status,
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.SelectAuthoritiesByUserID(System.String)">
             <summary>
             此函数调用存储过程 spSelectAuthoritiesByUserID 并返回包含记录的数据读取器.
             </summary>
            <param name="userID">变量 userID: 用于设置参数 '@UserID' 给存储过程spSelectAuthoritiesByUserID </param>	
             <returns>SqlDataReader</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectAuthoritiesByUserID  ] 如下：
             <code>
             
            
            
            
            --region [dbo].[spSelectAuthoritiesByUserID]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spSelectAuthoritiesByUserID]
            -- Date Generated: 2005年6月6日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spSelectAuthoritiesByUserID]
            	@UserID nvarchar(32)=null
            AS
            
            --SET NOCOUNT ON
            --SET TRANSACTION ISOLATION LEVEL READ COMMITTED
            
            SELECT
            	[AuthorityID],
            	[ModuleID],
            	[AuthorityType],
            	[AuthorityDescription]
            FROM
            	[dbo].[Authority]
            	
            WHERE
            	AuthorityID in 
            	(
            	select 
            		AuthorityID 
            	from 
            		RoleAuthority 
            	where 
            		RoleID in
            		(
            		select RoleID from UserRole where UserID=@UserID
            		)
            	)
            --endregion
            
            
             </code>
             结果集中的列包括:
             SqlString AuthorityID, SqlString ModuleID, SqlString AuthorityType, SqlString AuthorityDescription,
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.SelectAuthoritiesAllByUserID(System.String)">
             <summary>
             此函数调用存储过程 spSelectAuthoritiesAllByUserID 并返回包含记录的数据读取器.
             </summary>
            <param name="userID">变量 userID: 用于设置参数 '@UserID' 给存储过程spSelectAuthoritiesAllByUserID </param>	
             <returns>SqlDataReader</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectAuthoritiesAllByUserID  ] 如下：
             <code>
             
            
            
            
            --region [dbo].[spSelectAuthoritiesAllByUserID]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spSelectAuthoritiesAllByUserID]
            -- Date Generated: 2005年6月6日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spSelectAuthoritiesAllByUserID]
            	@UserID nvarchar(32)=null
            AS
            
            --SET NOCOUNT ON
            --SET TRANSACTION ISOLATION LEVEL READ COMMITTED
            
            SELECT
            	Authority.[AuthorityID],
            	Authority.[ModuleID],
            Authority.[AuthorityType],
            case when UserAuthority.AuthorityID is null then cast(0 as bit)
            else cast(1 as bit)
            end as HasAuth
            		   FROM
            		   [dbo].[Authority]
            LEFT OUTER JOIN
            			   (
            			   select 
            			   AuthorityID 
            			   from 
            				   RoleAuthority 
            				   where 
            					   RoleID in
            (
            select RoleID from UserRole where UserID=@UserID
            								)
            )UserAuthority
            	 ON Authority.AuthorityID = UserAuthority.AuthorityID
            									--endregion
            
            
             </code>
             结果集中的列包括:
             SqlString AuthorityID, SqlString ModuleID, SqlString AuthorityType, SqlString AuthorityDescription,
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.SelectAuthoritiesTableByUserID(System.String)">
             <summary>
             此函数调用存储过程 spSelectAuthoritiesByUserID 并返回包含查询结果的数据集
             </summary>
            <param name="userID">变量 userID: 用于设置参数 '@UserID' 给存储过程spSelectAuthoritiesByUserID </param>	
             <returns>包含记录集的数据表</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectAuthoritiesByUserID  ] 如下：
             <code>
             
            
            
            
            --region [dbo].[spSelectAuthoritiesByUserID]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spSelectAuthoritiesByUserID]
            -- Date Generated: 2005年6月6日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spSelectAuthoritiesByUserID]
            	@UserID nvarchar(32)=null
            AS
            
            --SET NOCOUNT ON
            --SET TRANSACTION ISOLATION LEVEL READ COMMITTED
            
            SELECT
            	[AuthorityID],
            	[ModuleID],
            	[AuthorityType],
            	[AuthorityDescription]
            FROM
            	[dbo].[Authority]
            	
            WHERE
            	AuthorityID in 
            	(
            	select 
            		AuthorityID 
            	from 
            		RoleAuthority 
            	where 
            		RoleID in
            		(
            		select RoleID from UserRole where UserID=@UserID
            		)
            	)
            --endregion
            
            
             </code>
             结果集中的列包括:
             SqlString AuthorityID, SqlString ModuleID, SqlString AuthorityType, SqlString AuthorityDescription,
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.SelectUserAuthoritiesAndModulesAll(System.String)">
             <summary>
             此函数调用存储过程 spSelectUserAuthoritiesAndModulesAll 并返回包含记录的数据读取器.
             </summary>
            <param name="roleID">变量 roleID: 用于设置参数 '@UserID' 给存储过程spSelectUserAuthoritiesAndModulesAll </param>	
             <returns>DataSet</returns>
             <remarks>
             存储过程源码 [ 存储过程 spSelectUserAuthoritiesAndModulesAll  ] 如下：
             <code>
             
            
            
            
            --region [dbo].[spSelectUserAuthoritiesAndModulesAll]
            
            ------------------------------------------------------------------------------------------------------------------------
            -- Create by:      Dou Zhi-Cheng
            -- Procedure Name: [dbo].[spSelectRoleAuthoritiesAndModulesAll]
            -- Date Generated: 2005年6月7日
            ------------------------------------------------------------------------------------------------------------------------
            
            CREATE PROCEDURE [dbo].[spSelectRoleAuthoritiesAndModulesAll]	
            	@UserID int = null
            AS
            
            --SET NOCOUNT ON
            --SET TRANSACTION ISOLATION LEVEL READ COMMITTED
            
            --select all the parentModuleID
            select distinct 
            	ParentModuleID
            from
            	Module
            where
            	ModuleID in 
            	(
            		select ModuleID from Authority
            	)	
            
            
            --get all the modules
            SELECT 
            	ParentModuleID,ModuleID,SubID
            FROM
            	Module
            where
            	ModuleID in 
            	(
            		select ModuleID from Authority
            	)	
            ORDER BY
            	ParentModuleID,IndexNo
            
            
            if @UserID is null
            begin
            
            	--get all the authorities
            	SELECT
            		[AuthorityID],
            		[ModuleID],
            		[AuthorityType],
            		cast(0 as bit) as IsInRole
            	FROM
            		[dbo].[Authority]
            	ORDER BY
            		AuthorityID
            end 
            else
            begin
            	--get all the authorities
            SELECT
            	Authority.[AuthorityID],
            	Authority.[ModuleID],
            Authority.[AuthorityType],
            case when UserAuthority.AuthorityID is null then cast(0 as bit)
            else cast(1 as bit)
            end as HasAuth
            		   FROM
            		   [dbo].[Authority]
            LEFT OUTER JOIN
            			   (
            			   select 
            			   AuthorityID 
            			   from 
            				   RoleAuthority 
            				   where 
            					   RoleID in
            (
            select RoleID from UserRole where UserID=@UserID
            								)
            )UserAuthority
            	 ON Authority.AuthorityID = UserAuthority.AuthorityID
            --endregion
            
            
             </code>
             </remarks>
        </member>
        <member name="M:Business.SystemConfig.CDAUserRoleAuthority.SelectUserDepartmentIDByUserID(System.String)">
             <summary>
             此函数调用存储过程 spSelectUserDepartmentByUserID 并返回包含查询结果的数据集
             </summary>
            <param name="UserID">变量 userID: 用于设置参数 '@UserID' 给存储过程spSelectUserDepartmentByUserID </param>	
             <returns>包含记录集的数据行</returns>
        </member>
        <member name="T:Business.BUSVendorEvaluateStandard">
            <summary>
            BUSVendorEvaluateStandard 的摘要说明。
            Added by QSQ 10.16
            </summary>
        </member>
        <member name="T:Business.BUSVendorBlackList">
            <summary>
            BUSVendorBlackList 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSMaterialRequest">
            <summary>
            BUSMaterialRequest 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.BUSMaterialRequest.CalculateEstTotalCost(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="dtEdit"></param>
            <param name="dtChild"></param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSMaterialRequest.UpdateMaterialListFromExecl(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            把Excel中的数据导入到DataTable中
            </summary>
            <param name="dtMaterialList"></param>
            <param name="dtExcel"></param>
        </member>
        <member name="M:Business.BUSMaterialRequest.JudgeRepert(System.Data.DataTable,System.Data.DataRow)">
            <summary>
            判断Excel中的ItemCode是否在页面中已经存在
            </summary>
            <param name="dtMaterialList"></param>
            <param name="drExcel"></param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSMaterialRequest.AddMaterialRowFromExecl(System.Data.DataTable,System.Data.DataRow)">
            <summary>
            把Excel行中数据导入数据表中
            </summary>
            <param name="dtMaterialList"></param>
            <param name="drExcel"></param>
        </member>
        <member name="M:Business.BUSMaterialRequest.GetMRState(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="strPkValue"></param>
            <param name="UserID"></param>
            <param name="popedomNew"></param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSMaterialRequest.UpdateMaterialList(System.Data.DataTable)">
            <summary>
            更新物资信息
            </summary>
            <param name="dtMaterialList"></param>
        </member>
        <member name="M:Business.BUSMaterialRequest.IsMainDepLeader(System.String,System.Int32)">
            <summary>
            得到登陆者和主控部门之间的关系
            </summary>
            <param name="sCurrentUserID">用户ID</param>
            <param name="nType">判断类型</param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSMaterialRequest.GetCurrentMRState(System.String,System.String)">
            <summary>
            得到当前MR状态
            </summary>
            <param name="strPkValue"></param>
            <param name="popedomNew"></param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSMaterialRequest.IsUndertaker(System.String,System.String)">
            <summary>
            是否接收人
            </summary>
            <param name="sCurrentUserID"></param>
            <param name="sPkValue"></param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSMaterialRequest.GetMtMRState(System.String,System.String)">
            <summary>
            判断审批状态
            </summary>
            <param name="strPkValue"></param>
            <param name="popedomNew"></param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSMaterialRequest.GetDepsByDepID(System.String)">
            <summary>
            通过部门来获得所有子科室
            </summary>
            <param name="DepID"></param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSMaterialRequest.GetSeePerson(System.String)">
            <summary>
            得到所有查看人信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.BUSMaterialRequest.CheckExist(System.String,System.Data.DataTable)">
            <summary>
            是否在SeePerson表中存在
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.BUSMaterialRequest.DelViewer(System.String)">
            <summary>
            删除查看人
            </summary>
            <param name="strIDKey"></param>
        </member>
        <member name="M:Business.BUSMaterialRequest.GetBI_EmployeeID(System.String)">
            <summary>
            根据BI_DepartmentEmployee.IDKey 得到BI_Employee.IDKey
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.BUSMaterialRequest.GetSeePerson_User(System.String)">
            <summary>
            得到单个用户信息
            </summary>
            <param name="UserID">用户ID(暂时保存为部门员工的IDKey，以后可能会有变动)</param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSMaterialRequest.GetSeePerson_Department(System.String)">
            <summary>
            得到指定部门的人员信息
            </summary>
            <param name="DepartmentID">部门ID</param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSMaterialRequest.GetSeePerson_Group(System.String)">
            <summary>
            
            </summary>
            <param name="GroupID"></param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSMaterialRequest.CheckBusinessData(System.Data.DataTable)">
            <summary>
            校验子表是否有数据
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSMaterialRequest.CheckMaterial(System.Data.DataTable)">
            <summary>
            判断数量是否小于0
            </summary>
            <param name="dtMaterial"></param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSMaterialRequest.GetDepartmentByEmployeeID(System.String)">
            <summary>
            通过员工来获得所对应的ID ( Added By wxc at 12.4 )
            </summary>
            <param name="EmployeeID"></param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSMaterialRequest.GetUserDepartmentID(System.String)">
            <param name="sCurrentUserID">登陆编号</param>
            <returns>popedomDepID</returns>
        </member>
        <member name="T:Business.BUSDefaultGroup">
            <summary>
            BUSDefaultGroup 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.BUSDefaultGroup.CheckChildRows(System.Data.DataTable)">
            <summary>
            校验是否有招标小组成员
            </summary>
            <param name="dtChild"></param>
            <returns></returns>
        </member>
        <member name="T:Business.BUSApproveFlow">
            <summary>
            BUSTenderGroup 的摘要说明。
            </summary>
        </member>
        <member name="M:Business.BUSApproveFlow.CheckChildRows(System.Data.DataTable)">
            <summary>
            验证是否有审批步骤
            </summary>
            <param name="dtChild"></param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSApproveFlow.CheckBusinessData(System.Data.DataTable,System.Collections.ArrayList)">
            <summary>
            校验数据
            </summary>
            <param name="dt"></param>
            <param name="fieldsList"></param>
            <returns></returns>
        </member>
        <member name="M:Business.BUSApproveFlow.CheckBusinessLogic_calculate(System.Data.DataTable,System.Collections.ArrayList)">
            <summary>
            校验数据
            </summary>
            <param name="dt"></param>
            <param name="fieldsList"></param>
            <returns></returns>
        </member>
        <member name="T:Business.BUSBITables">
            <summary>
            BUSBITables
            Modified by QSQ 10.30
            </summary>
        </member>
        <member name="M:Business.BUSBITables.getNum(System.String)">
            <summary>
            得到查询记录数目
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="T:Business.BUSBIDepartEmployee">
            <summary>
            BusSex 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSAFE">
            <summary>
            BUSAFE 的摘要说明。
            </summary>
        </member>
        <member name="T:Business.BUSApproveProcessing">
            <summary>
            审批处理(浏览界面)的逻辑类
            </summary>
        </member>
    </members>
</doc>
